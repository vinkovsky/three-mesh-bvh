{"mappings":"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","sources":["node_modules/stats.js/build/stats.min.js","example/physics.js"],"sourcesContent":["// stats.js - http://github.com/mrdoob/stats.js\n(function(f,e){\"object\"===typeof exports&&\"undefined\"!==typeof module?module.exports=e():\"function\"===typeof define&&define.amd?define(e):f.Stats=e()})(this,function(){var f=function(){function e(a){c.appendChild(a.dom);return a}function u(a){for(var d=0;d<c.children.length;d++)c.children[d].style.display=d===a?\"block\":\"none\";l=a}var l=0,c=document.createElement(\"div\");c.style.cssText=\"position:fixed;top:0;left:0;cursor:pointer;opacity:0.9;z-index:10000\";c.addEventListener(\"click\",function(a){a.preventDefault();\nu(++l%c.children.length)},!1);var k=(performance||Date).now(),g=k,a=0,r=e(new f.Panel(\"FPS\",\"#0ff\",\"#002\")),h=e(new f.Panel(\"MS\",\"#0f0\",\"#020\"));if(self.performance&&self.performance.memory)var t=e(new f.Panel(\"MB\",\"#f08\",\"#201\"));u(0);return{REVISION:16,dom:c,addPanel:e,showPanel:u,begin:function(){k=(performance||Date).now()},end:function(){a++;var c=(performance||Date).now();h.update(c-k,200);if(c>g+1E3&&(r.update(1E3*a/(c-g),100),g=c,a=0,t)){var d=performance.memory;t.update(d.usedJSHeapSize/\n1048576,d.jsHeapSizeLimit/1048576)}return c},update:function(){k=this.end()},domElement:c,setMode:u}};f.Panel=function(e,f,l){var c=Infinity,k=0,g=Math.round,a=g(window.devicePixelRatio||1),r=80*a,h=48*a,t=3*a,v=2*a,d=3*a,m=15*a,n=74*a,p=30*a,q=document.createElement(\"canvas\");q.width=r;q.height=h;q.style.cssText=\"width:80px;height:48px\";var b=q.getContext(\"2d\");b.font=\"bold \"+9*a+\"px Helvetica,Arial,sans-serif\";b.textBaseline=\"top\";b.fillStyle=l;b.fillRect(0,0,r,h);b.fillStyle=f;b.fillText(e,t,v);\nb.fillRect(d,m,n,p);b.fillStyle=l;b.globalAlpha=.9;b.fillRect(d,m,n,p);return{dom:q,update:function(h,w){c=Math.min(c,h);k=Math.max(k,h);b.fillStyle=l;b.globalAlpha=1;b.fillRect(0,0,r,m);b.fillStyle=f;b.fillText(g(h)+\" \"+e+\" (\"+g(c)+\"-\"+g(k)+\")\",t,v);b.drawImage(q,d+a,m,n-a,p,d,m,n-a,p);b.fillRect(d+n-a,m,a,p);b.fillStyle=l;b.globalAlpha=.9;b.fillRect(d+n-a,m,a,g((1-h/w)*p))}}};return f});\n","import * as THREE from 'three';\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader.js';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';\nimport * as BufferGeometryUtils from 'three/examples/jsm/utils/BufferGeometryUtils.js';\nimport Stats from 'stats.js';\nimport { GUI } from 'dat.gui';\nimport { MeshBVH, MeshBVHVisualizer } from '..';\n\nconst params = {\n\n\tdisplayCollider: false,\n\tdisplayBVH: false,\n\tdisplayParents: false,\n\tvisualizeDepth: 10,\n\tgravity: - 9.8,\n\tphysicsSteps: 5,\n\t// TODO: support steps based on given sphere velocity / radius\n\tsimulationSpeed: 1,\n\tsphereSize: 1,\n\tpause: false,\n\tstep: () => {\n\n\t\tconst steps = params.physicsSteps;\n\t\tfor ( let i = 0; i < steps; i ++ ) {\n\n\t\t\tupdate( 0.016 / steps );\n\n\t\t}\n\n\t},\n\texplode: explodeSpheres,\n\treset: reset,\n\n};\n\nlet renderer, camera, scene, clock, gui, stats;\nlet environment, collider, visualizer;\nconst spheres = [];\nconst hits = [];\nconst tempSphere = new THREE.Sphere();\nconst deltaVec = new THREE.Vector3();\nconst tempVec = new THREE.Vector3();\nconst forwardVector = new THREE.Vector3( 0, 0, 1 );\n\ninit();\nrender();\n\nfunction init() {\n\n\tconst bgColor = 0x263238 / 2;\n\n\t// renderer setup\n\trenderer = new THREE.WebGLRenderer( { antialias: true } );\n\trenderer.setPixelRatio( window.devicePixelRatio );\n\trenderer.setSize( window.innerWidth, window.innerHeight );\n\trenderer.setClearColor( bgColor, 1 );\n\trenderer.shadowMap.enabled = true;\n\trenderer.shadowMap.type = THREE.PCFSoftShadowMap;\n\trenderer.outputEncoding = THREE.sRGBEncoding;\n\tdocument.body.appendChild( renderer.domElement );\n\n\t// scene setup\n\tscene = new THREE.Scene();\n\tscene.fog = new THREE.Fog( bgColor, 30, 70 );\n\n\t// lights\n\tconst light = new THREE.DirectionalLight( 0xaaccff, 1 );\n\tlight.position.set( 1, 1.5, 1 ).multiplyScalar( 50 );\n\tlight.intensity = 0.25;\n\n\tconst shadowCam = light.shadow.camera;\n\tshadowCam.bottom = shadowCam.left = - 10;\n\tshadowCam.top = shadowCam.right = 10;\n\n\tscene.add( light );\n\tscene.add( new THREE.HemisphereLight( 0x4488ff, 0x223344, 0.3 ) );\n\n\t// camera setup\n\tcamera = new THREE.PerspectiveCamera( 75, window.innerWidth / window.innerHeight, 0.1, 50 );\n\tcamera.position.set( 10, 10, - 10 );\n\tcamera.far = 100;\n\tcamera.updateProjectionMatrix();\n\twindow.camera = camera;\n\n\tclock = new THREE.Clock();\n\n\tnew OrbitControls( camera, renderer.domElement );\n\n\t// stats setup\n\tstats = new Stats();\n\tdocument.body.appendChild( stats.dom );\n\n\tloadColliderEnvironment();\n\n\t// dat.gui\n\tgui = new GUI();\n\tconst visFolder = gui.addFolder( 'Visualization' );\n\tvisFolder.add( params, 'displayCollider' );\n\tvisFolder.add( params, 'displayBVH' );\n\tvisFolder.add( params, 'displayParents' ).onChange( v => {\n\n\t\tvisualizer.displayParents = v;\n\t\tvisualizer.update();\n\n\t} );\n\tvisFolder.add( params, 'visualizeDepth', 1, 20, 1 ).onChange( v => {\n\n\t\tvisualizer.depth = v;\n\t\tvisualizer.update();\n\n\t} );\n\tvisFolder.open();\n\n\tconst physicsFolder = gui.addFolder( 'Physics' );\n\tphysicsFolder.add( params, 'physicsSteps', 0, 30, 1 );\n\tphysicsFolder.add( params, 'gravity', - 100, 100, 0.01 ).onChange( v => {\n\n\t\tparams.gravity = parseFloat( v );\n\n\t} );\n\tphysicsFolder.add( params, 'simulationSpeed', 0, 5, 0.01 );\n\tphysicsFolder.add( params, 'sphereSize', 0.2, 5, 0.1 );\n\tphysicsFolder.add( params, 'pause' );\n\tphysicsFolder.add( params, 'step' );\n\tphysicsFolder.open();\n\n\tgui.add( params, 'explode' );\n\tgui.add( params, 'reset' );\n\tgui.open();\n\n\tconst raycaster = new THREE.Raycaster();\n\tconst mouse = new THREE.Vector2();\n\tlet x = 0;\n\tlet y = 0;\n\trenderer.domElement.addEventListener( 'pointerdown', e => {\n\n\t\tx = e.clientX;\n\t\ty = e.clientY;\n\n\t} );\n\n\trenderer.domElement.addEventListener( 'pointerup', e => {\n\n\t\tconst totalDelta = Math.abs( e.clientX - x ) + Math.abs( e.clientY - y );\n\t\tif ( totalDelta > 2 ) return;\n\n\t\tmouse.x = ( e.clientX / window.innerWidth ) * 2 - 1;\n\t\tmouse.y = - ( e.clientY / window.innerHeight ) * 2 + 1;\n\t\traycaster.setFromCamera( mouse, camera );\n\n\t\tconst sphere = createSphere();\n\t\tsphere.position.copy( camera.position ).addScaledVector( raycaster.ray.direction, 3 );\n\t\tsphere\n\t\t\t.velocity\n\t\t\t.set( Math.random() - 0.5, Math.random() - 0.5, Math.random() - 0.5 )\n\t\t\t.addScaledVector( raycaster.ray.direction, 10 * Math.random() + 15 )\n\t\t\t.multiplyScalar( 0.5 );\n\n\t} );\n\n\twindow.addEventListener( 'resize', function () {\n\n\t\tcamera.aspect = window.innerWidth / window.innerHeight;\n\t\tcamera.updateProjectionMatrix();\n\n\t\trenderer.setSize( window.innerWidth, window.innerHeight );\n\n\t}, false );\n\n\twindow.createSphere = createSphere;\n\n}\n\nfunction loadColliderEnvironment() {\n\n\tnew GLTFLoader().load( '../models/low_poly_environment_jungle_scene/scene.gltf', res => {\n\n\t\tenvironment = res.scene;\n\t\tenvironment.scale.setScalar( 0.05 );\n\n\t\tconst pointLight = new THREE.PointLight( 0x00ffff );\n\t\tpointLight.distance = 7;\n\t\tpointLight.position.set( - 100, - 40, 100 );\n\t\tenvironment.add( pointLight );\n\n\t\tconst porchLight = new THREE.PointLight( 0xffdd66 );\n\t\tporchLight.distance = 15;\n\t\tporchLight.intensity = 5;\n\t\tporchLight.position.set( 80, 80, 135 );\n\t\tporchLight.shadow.normalBias = 1e-2;\n\t\tporchLight.shadow.bias = - 1e-3;\n\t\tporchLight.shadow.mapSize.setScalar( 1024 );\n\t\tporchLight.castShadow = true;\n\n\t\tenvironment.add( porchLight );\n\n\t\t// collect all geometries to merge\n\t\tconst geometries = [];\n\t\tenvironment.updateMatrixWorld( true );\n\t\tenvironment.traverse( c => {\n\n\t\t\tif ( c.geometry ) {\n\n\t\t\t\tconst cloned = c.geometry.clone();\n\t\t\t\tcloned.applyMatrix4( c.matrixWorld );\n\t\t\t\tfor ( const key in cloned.attributes ) {\n\n\t\t\t\t\tif ( key !== 'position' ) {\n\n\t\t\t\t\t\tcloned.deleteAttribute( key );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tgeometries.push( cloned );\n\n\t\t\t}\n\n\t\t} );\n\n\t\t// create the merged geometry\n\t\tconst mergedGeometry = BufferGeometryUtils.mergeBufferGeometries( geometries, false );\n\t\tmergedGeometry.boundsTree = new MeshBVH( mergedGeometry );\n\n\t\tcollider = new THREE.Mesh( mergedGeometry );\n\t\tcollider.material.wireframe = true;\n\t\tcollider.material.opacity = 0.5;\n\t\tcollider.material.transparent = true;\n\n\t\tvisualizer = new MeshBVHVisualizer( collider, params.visualizeDepth );\n\t\tscene.add( visualizer );\n\t\tscene.add( collider );\n\t\tscene.add( environment );\n\n\t\tenvironment.traverse( c => {\n\n\t\t\tif ( c.material ) {\n\n\t\t\t\tc.castShadow = true;\n\t\t\t\tc.receiveShadow = true;\n\t\t\t\tc.material.shadowSide = 2;\n\n\t\t\t}\n\n\t\t} );\n\n\t} );\n\n}\n\nfunction onCollide( object1, object2, point, normal, velocity, offset = 0 ) {\n\n\tif ( velocity < Math.max( Math.abs( 0.04 * params.gravity ), 5 ) ) {\n\n\t\treturn;\n\n\t}\n\n\t// Create an animation when objects collide\n\tconst effectScale = Math.max(\n\t\tobject2 ?\n\t\t\tMath.max( object1.collider.radius, object2.collider.radius ) :\n\t\t\tobject1.collider.radius,\n\t\t0.4\n\t) * 2.0;\n\tconst plane = new THREE.Mesh(\n\t\tnew THREE.RingBufferGeometry( 0, 1, 30 ),\n\t\tnew THREE.MeshBasicMaterial( { side: 2, transparent: true, depthWrite: false } )\n\t);\n\tplane.lifetime = 0;\n\tplane.maxLifetime = 0.4;\n\tplane.maxScale = effectScale * Math.max( Math.sin( Math.min( velocity / 200, 1 ) * Math.PI / 2 ), 0.35 );\n\n\tplane.position.copy( point ).addScaledVector( normal, offset );\n\tplane.quaternion.setFromUnitVectors( forwardVector, normal );\n\tscene.add( plane );\n\thits.push( plane );\n\n}\n\nfunction createSphere() {\n\n\tconst white = new THREE.Color( 0xffffff );\n\tconst color = new THREE.Color( 0x263238 / 2 ).lerp( white, Math.random() * 0.5 + 0.5 ).convertSRGBToLinear();\n\tconst sphere = new THREE.Mesh(\n\t\tnew THREE.SphereBufferGeometry( 1, 20, 20 ),\n\t\tnew THREE.MeshStandardMaterial( { color } )\n\t);\n\tscene.add( sphere );\n\tsphere.castShadow = true;\n\tsphere.receiveShadow = true;\n\tsphere.material.shadowSide = 2;\n\n\tconst radius = 0.5 * params.sphereSize * ( Math.random() * .2 + 0.6 );\n\tsphere.scale.setScalar( radius );\n\tsphere.collider = new THREE.Sphere( sphere.position, radius );\n\tsphere.velocity = new THREE.Vector3( 0, 0, 0 );\n\tsphere.mass = Math.pow( radius, 3 ) * Math.PI * 4 / 3;\n\n\tspheres.push( sphere );\n\treturn sphere;\n\n}\n\nfunction updateSphereCollisions( deltaTime ) {\n\n\t// TODO: Add visualization for velocity vector, collision vector, all intersection vectors\n\tconst bvh = collider.geometry.boundsTree;\n\tfor ( let i = 0, l = spheres.length; i < l; i ++ ) {\n\n\t\tconst sphere = spheres[ i ];\n\t\tconst sphereCollider = sphere.collider;\n\n\t\t// move the sphere\n\t\tsphere.velocity.y += params.gravity * deltaTime;\n\t\tsphereCollider.center.addScaledVector( sphere.velocity, deltaTime );\n\n\t\t// remove the spheres if they've left the world\n\t\tif ( sphereCollider.center.y < - 80 ) {\n\n\t\t\tspheres.splice( i, 1 );\n\t\t\ti --;\n\t\t\tl --;\n\n\t\t\tsphere.material.dispose();\n\t\t\tsphere.geometry.dispose();\n\t\t\tscene.remove( sphere );\n\t\t\tcontinue;\n\n\t\t}\n\n\t\t// get the sphere position in world space\n\t\ttempSphere.copy( sphere.collider );\n\n\t\tlet collided = false;\n\t\tbvh.shapecast( {\n\n\t\t\tintersectsBounds: box => {\n\n\t\t\t\treturn box.intersectsSphere( tempSphere );\n\n\t\t\t},\n\n\t\t\tintersectsTriangle: tri => {\n\n\t\t\t\t// get delta between closest point and center\n\t\t\t\ttri.closestPointToPoint( tempSphere.center, deltaVec );\n\t\t\t\tdeltaVec.sub( tempSphere.center );\n\t\t\t\tconst distance = deltaVec.length();\n\t\t\t\tif ( distance < tempSphere.radius ) {\n\n\t\t\t\t\t// move the sphere position to be outside the triangle\n\t\t\t\t\tconst radius = tempSphere.radius;\n\t\t\t\t\tconst depth = distance - radius;\n\t\t\t\t\tdeltaVec.multiplyScalar( 1 / distance );\n\t\t\t\t\ttempSphere.center.addScaledVector( deltaVec, depth );\n\n\t\t\t\t\tcollided = true;\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\ttraverseBoundsOrder: box => {\n\n\t\t\t\treturn box.distanceToPoint( tempSphere.center ) - tempSphere.radius;\n\n\t\t\t},\n\n\t\t} );\n\n\t\tif ( collided ) {\n\n\t\t\t// get the delta direction and reflect the velocity across it\n\t\t\tdeltaVec.subVectors( tempSphere.center, sphereCollider.center ).normalize();\n\t\t\tsphere.velocity.reflect( deltaVec );\n\n\t\t\t// dampen the velocity and apply some drag\n\t\t\tconst dot = sphere.velocity.dot( deltaVec );\n\t\t\tsphere.velocity.addScaledVector( deltaVec, - dot * 0.5 );\n\t\t\tsphere.velocity.multiplyScalar( Math.max( 1.0 - deltaTime, 0 ) );\n\n\t\t\t// update the sphere collider position\n\t\t\tsphereCollider.center.copy( tempSphere.center );\n\n\t\t\t// find the point on the surface that was hit\n\t\t\ttempVec\n\t\t\t\t.copy( tempSphere.center )\n\t\t\t\t.addScaledVector( deltaVec, - tempSphere.radius );\n\t\t\tonCollide( sphere, null, tempVec, deltaVec, dot, 0.05 );\n\n\t\t}\n\n\t}\n\n\t// Handle sphere collisions\n\tfor ( let i = 0, l = spheres.length; i < l; i ++ ) {\n\n\t\tconst s1 = spheres[ i ];\n\t\tconst c1 = s1.collider;\n\t\tfor ( let j = i + 1; j < l; j ++ ) {\n\n\t\t\tconst s2 = spheres[ j ];\n\t\t\tconst c2 = s2.collider;\n\n\t\t\t// If they actually intersected\n\t\t\tdeltaVec.subVectors( c1.center, c2.center );\n\t\t\tconst depth = deltaVec.length() - ( c1.radius + c2.radius );\n\t\t\tif ( depth < 0 ) {\n\n\t\t\t\tdeltaVec.normalize();\n\n\t\t\t\t// get the magnitude of the velocity in the hit direction\n\t\t\t\tconst v1dot = s1.velocity.dot( deltaVec );\n\t\t\t\tconst v2dot = s2.velocity.dot( deltaVec );\n\n\t\t\t\t// distribute how much to offset the spheres based on how\n\t\t\t\t// quickly they were going relative to each other. The ball\n\t\t\t\t// that was moving should move back the most. Add a max value\n\t\t\t\t// to avoid jitter.\n\t\t\t\tconst offsetRatio1 = Math.max( v1dot, 0.2 );\n\t\t\t\tconst offsetRatio2 = Math.max( v2dot, 0.2 );\n\n\t\t\t\tconst total = offsetRatio1 + offsetRatio2;\n\t\t\t\tconst ratio1 = offsetRatio1 / total;\n\t\t\t\tconst ratio2 = offsetRatio2 / total;\n\n\t\t\t\t// correct the positioning of the spheres\n\t\t\t\tc1.center.addScaledVector( deltaVec, - ratio1 * depth );\n\t\t\t\tc2.center.addScaledVector( deltaVec, ratio2 * depth );\n\n\t\t\t\t// Use the momentum formula to adjust velocities\n\t\t\t\tconst velocityDifference = new THREE.Vector3();\n\t\t\t\tvelocityDifference\n\t\t\t\t\t.addScaledVector( deltaVec, - v1dot )\n\t\t\t\t\t.addScaledVector( deltaVec, v2dot );\n\n\t\t\t\tconst velDiff = velocityDifference.length();\n\t\t\t\tconst m1 = s1.mass;\n\t\t\t\tconst m2 = s2.mass;\n\n\t\t\t\t// Compute new velocities in the moving frame of the sphere that\n\t\t\t\t// moved into the other.\n\t\t\t\tlet newVel1, newVel2;\n\t\t\t\tconst damping = 0.5;\n\t\t\t\tif ( velocityDifference.dot( s1.velocity ) > velocityDifference.dot( s2.velocity ) ) {\n\n\t\t\t\t\tnewVel1 = damping * velDiff * ( m1 - m2 ) / ( m1 + m2 );\n\t\t\t\t\tnewVel2 = damping * velDiff * 2 * m1 / ( m1 + m2 );\n\n\t\t\t\t\t// remove any existing relative velocity from the moving sphere\n\t\t\t\t\tnewVel1 -= velDiff;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tnewVel1 = damping * velDiff * 2 * m2 / ( m1 + m2 );\n\t\t\t\t\tnewVel2 = damping * velDiff * ( m2 - m1 ) / ( m1 + m2 );\n\n\t\t\t\t\t// remove any existing relative velocity from the moving sphere\n\t\t\t\t\tnewVel2 -= velDiff;\n\n\t\t\t\t}\n\n\t\t\t\t// Apply new velocities\n\t\t\t\tvelocityDifference.normalize();\n\t\t\t\ts1.velocity.addScaledVector( velocityDifference, newVel1 );\n\t\t\t\ts2.velocity.addScaledVector( velocityDifference, newVel2 );\n\n\t\t\t\ttempVec.copy( c1.center ).addScaledVector( deltaVec, - c1.radius );\n\t\t\t\tonCollide( s1, s2, tempVec, deltaVec, velDiff, 0 );\n\n\t\t\t}\n\n\t\t}\n\n\t\ts1.position.copy( c1.center );\n\n\t}\n\n}\n\nfunction reset() {\n\n\tspheres.forEach( s => {\n\n\t\ts.material.dispose();\n\t\ts.geometry.dispose();\n\t\tscene.remove( s );\n\n\t} );\n\tspheres.length = 0;\n\n\thits.forEach( h => {\n\n\t\th.material.dispose();\n\t\th.geometry.dispose();\n\t\tscene.remove( h );\n\n\t} );\n\thits.length = 0;\n\n}\n\nfunction explodeSpheres() {\n\n\tconst temp = new THREE.Vector3();\n\tspheres.forEach( s => {\n\n\t\ttemp.copy( s.position );\n\t\ttemp.y += 10;\n\t\ttemp.normalize();\n\t\ts.velocity.addScaledVector( temp, 120 );\n\n\t} );\n\n}\n\n// Update physics and animation\nfunction update( delta ) {\n\n\tif ( collider ) {\n\n\t\tconst steps = params.physicsSteps;\n\t\tfor ( let i = 0; i < steps; i ++ ) {\n\n\t\t\tupdateSphereCollisions( delta / steps );\n\n\t\t}\n\n\t}\n\n\t// Update collision animations\n\tfor ( let i = 0, l = hits.length; i < l; i ++ ) {\n\n\t\tconst hit = hits[ i ];\n\t\thit.lifetime += delta;\n\n\t\tconst ratio = hit.lifetime / hit.maxLifetime;\n\t\tlet scale = Math.sin( ratio * 4.5 * Math.PI / 4 );\n\t\tscale = 1.0 - Math.pow( 1.0 - scale, 2 );\n\t\thit.scale.setScalar( scale * hit.maxScale );\n\t\thit.material.opacity = 1.0 - Math.sin( ratio * 2 * Math.PI / 4 );\n\n\t\tif ( ratio >= 1 ) {\n\n\t\t\thits.splice( i, 1 );\n\t\t\thit.parent.remove( hit );\n\t\t\thit.geometry.dispose();\n\t\t\thit.material.dispose();\n\t\t\ti --;\n\t\t\tl --;\n\n\t\t}\n\n\t}\n\n}\n\nfunction render() {\n\n\tstats.update();\n\trequestAnimationFrame( render );\n\n\tconst delta = Math.min( clock.getDelta(), 0.1 );\n\n\tif ( collider ) {\n\n\t\tcollider.visible = params.displayCollider;\n\t\tvisualizer.visible = params.displayBVH;\n\n\t\tif ( ! params.pause ) {\n\n\t\t\tupdate( params.simulationSpeed * delta );\n\n\t\t}\n\n\t}\n\n\trenderer.render( scene, camera );\n\n}\n"],"names":["f","e","$f4c59361c37dab96$exports","a","c","appendChild","dom","u","d","children","length","style","display","l","document","createElement","cssText","addEventListener","preventDefault","k","performance","Date","now","g","r","Panel","h","self","memory","t","REVISION","addPanel","showPanel","begin","end","update","usedJSHeapSize","jsHeapSizeLimit","this","domElement","setMode","Infinity","Math","round","window","devicePixelRatio","v","m","n","p","q","width","height","b","getContext","font","textBaseline","fillStyle","fillRect","fillText","globalAlpha","w","min","max","drawImage","define","amd","Stats","$52854ff2b2c1267f$var$params","displayCollider","displayBVH","displayParents","visualizeDepth","gravity","physicsSteps","simulationSpeed","sphereSize","pause","step","steps","i","$52854ff2b2c1267f$var$update","explode","temp","$hGT0Q","Vector3","$52854ff2b2c1267f$var$spheres","forEach","s","copy","position","y","normalize","velocity","addScaledVector","reset","material","dispose","geometry","$52854ff2b2c1267f$var$scene","remove","$52854ff2b2c1267f$var$hits","$52854ff2b2c1267f$var$renderer","$52854ff2b2c1267f$var$camera","$52854ff2b2c1267f$var$clock","$52854ff2b2c1267f$var$gui","$52854ff2b2c1267f$var$stats","$52854ff2b2c1267f$var$environment","$52854ff2b2c1267f$var$collider","$52854ff2b2c1267f$var$visualizer","$52854ff2b2c1267f$var$tempSphere","Sphere","$52854ff2b2c1267f$var$deltaVec","$52854ff2b2c1267f$var$tempVec","$52854ff2b2c1267f$var$forwardVector","$52854ff2b2c1267f$var$onCollide","object1","object2","point","normal","offset","abs","effectScale","collider","radius","plane","Mesh","RingBufferGeometry","MeshBasicMaterial","side","transparent","depthWrite","lifetime","maxLifetime","maxScale","sin","PI","quaternion","setFromUnitVectors","add","push","$52854ff2b2c1267f$var$createSphere","white","Color","color","lerp","random","convertSRGBToLinear","sphere","SphereBufferGeometry","MeshStandardMaterial","castShadow","receiveShadow","shadowSide","scale","setScalar","mass","pow","$52854ff2b2c1267f$var$updateSphereCollisions","deltaTime","bvh","boundsTree","sphereCollider","center","splice","collided","shapecast","intersectsBounds","box","intersectsSphere","intersectsTriangle","tri","closestPointToPoint","sub","distance","depth","multiplyScalar","traverseBoundsOrder","distanceToPoint","subVectors","reflect","dot","i1","l1","s1","c1","j","s2","c2","v1dot","v2dot","offsetRatio1","offsetRatio2","total","ratio1","ratio2","velocityDifference","velDiff","m1","m2","newVel1","newVel2","damping","delta","hit","ratio","opacity","parent","bgColor","WebGLRenderer","antialias","setPixelRatio","setSize","innerWidth","innerHeight","setClearColor","shadowMap","enabled","type","PCFSoftShadowMap","outputEncoding","sRGBEncoding","body","Scene","fog","Fog","light","DirectionalLight","set","intensity","shadowCam","shadow","camera","bottom","left","top","right","HemisphereLight","PerspectiveCamera","far","updateProjectionMatrix","Clock","$W2bOH","OrbitControls","$parcel$interopDefault","$4EHgc","GLTFLoader","load","res","scene","pointLight","PointLight","porchLight","normalBias","bias","mapSize","geometries","updateMatrixWorld","traverse","cloned","clone","applyMatrix4","matrixWorld","key","attributes","deleteAttribute","mergedGeometry","$7N5zk","mergeBufferGeometries","$aBPXg","MeshBVH","wireframe","MeshBVHVisualizer","$4Q0VG","GUI","visFolder","addFolder","onChange","open","physicsFolder","parseFloat","raycaster","Raycaster","mouse","Vector2","x","clientX","clientY","setFromCamera","ray","direction","aspect","createSphere","$52854ff2b2c1267f$var$init","$52854ff2b2c1267f$var$render","requestAnimationFrame","getDelta","visible","render"],"version":3,"file":"physics.aa74ceb6.js.map"}