{"mappings":"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","sources":["example/inspector.js"],"sourcesContent":["import * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader.js';\nimport { FullScreenQuad } from 'three/examples/jsm/postprocessing/Pass.js';\n\nimport { GUI } from 'dat.gui';\nimport {\n\tacceleratedRaycast, computeBoundsTree, disposeBoundsTree, MeshBVHVisualizer,\n\tSAH, CENTER, AVERAGE, getBVHExtremes, estimateMemoryInBytes,\n} from '..';\n\nTHREE.Mesh.prototype.raycast = acceleratedRaycast;\nTHREE.BufferGeometry.prototype.computeBoundsTree = computeBoundsTree;\nTHREE.BufferGeometry.prototype.disposeBoundsTree = disposeBoundsTree;\n\nlet scene, camera, renderer, helper, mesh, outputContainer, benchmarkContainer;\nlet benchmarkViz, renderTarget, fsQuad;\nlet mouse = new THREE.Vector2();\nconst readBuffer = new Float32Array( 1 );\n\nconst modelPath = '../models/DragonAttenuation.glb';\nconst params = {\n\n\toptions: {\n\t\tstrategy: SAH,\n\t\tmaxLeafTris: 10,\n\t\tmaxDepth: 40,\n\t\trebuild: function () {\n\n\t\t\tupdateBVH();\n\n\t\t},\n\t},\n\n\tvisualization: {\n\n\t\tdisplayMesh: true,\n\t\tsimpleColors: false,\n\t\toutline: true,\n\t\ttraversalThreshold: 50,\n\n\t},\n\n\tbenchmark: {\n\n\t\tdisplayRays: false,\n\t\tfirstHitOnly: true,\n\t\trotations: 10,\n\t\tcastCount: 1000,\n\n\t}\n\n};\n\nconst BOUNDS_COLOR = 0xffca28;\nconst BG_COLOR = 0x002027;\nconst THRESHOLD_COLOR = 0xe91e63;\n\nclass TraverseMaterial extends THREE.ShaderMaterial {\n\n\tconstructor( params ) {\n\n\t\tsuper( {\n\n\t\t\tuniforms: {\n\t\t\t\tmap: { value: null },\n\t\t\t\tthreshold: { value: 35 },\n\n\t\t\t\tboundsColor: { value: new THREE.Color( 0xffffff ) },\n\t\t\t\tbackgroundColor: { value: new THREE.Color( 0x000000 ) },\n\t\t\t\tthresholdColor: { value: new THREE.Color( 0xff0000 ) },\n\t\t\t\tresolution: { value: new THREE.Vector2() },\n\t\t\t\toutlineAlpha: { value: 0.5 },\n\t\t\t},\n\n\t\t\tvertexShader: /* glsl */`\n\t\t\t\tvarying vec2 vUv;\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tvUv = uv;\n\t\t\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\n\t\t\t\t}\n\t\t\t`,\n\n\t\t\tfragmentShader: /* glsl */`\n\t\t\t\tuniform sampler2D map;\n\t\t\t\tuniform float threshold;\n\n\t\t\t\tuniform vec3 thresholdColor;\n\t\t\t\tuniform vec3 boundsColor;\n\t\t\t\tuniform vec3 backgroundColor;\n\t\t\t\tuniform vec2 resolution;\n\t\t\t\tuniform float outlineAlpha;\n\n\t\t\t\tvarying vec2 vUv;\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tfloat count = texture2D( map, vUv ).r;\n\n\t\t\t\t\tif ( count == 0.0 ) {\n\n\t\t\t\t\t\tvec2 offset = 1.0 / resolution;\n\t\t\t\t\t\tfloat c1 = texture2D( map, vUv + offset * vec2( 1.0, 0.0 ) ).r;\n\t\t\t\t\t\tfloat c2 = texture2D( map, vUv + offset * vec2( - 1.0, 0.0 ) ).r;\n\t\t\t\t\t\tfloat c3 = texture2D( map, vUv + offset * vec2( 0.0, 1.0 ) ).r;\n\t\t\t\t\t\tfloat c4 = texture2D( map, vUv + offset * vec2( 0.0, - 1.0 ) ).r;\n\n\t\t\t\t\t\tfloat maxC = max( c1, max( c2, max( c3, c4 ) ) );\n\t\t\t\t\t\tif ( maxC != 0.0 ) {\n\n\t\t\t\t\t\t\tgl_FragColor.rgb = mix( backgroundColor, mix( boundsColor, vec3( 1.0 ), 0.5 ), outlineAlpha );\n\t\t\t\t\t\t\tgl_FragColor.a = 1.0;\n\t\t\t\t\t\t\treturn;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( count > threshold ) {\n\n\t\t\t\t\t\tgl_FragColor.rgb = thresholdColor.rgb;\n\t\t\t\t\t\tgl_FragColor.a = 1.0;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tfloat alpha = count / threshold;\n\t\t\t\t\t\tvec3 color = mix( boundsColor, vec3( 1.0 ), pow( alpha, 1.75 ) );\n\n\t\t\t\t\t\tgl_FragColor.rgb = mix( backgroundColor, color, alpha ).rgb ;\n\t\t\t\t\t\tgl_FragColor.a = 1.0;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t`,\n\n\t\t} );\n\n\t\tconst uniforms = this.uniforms;\n\t\tfor ( const key in uniforms ) {\n\n\t\t\tObject.defineProperty( this, key, {\n\n\t\t\t\tget() {\n\n\t\t\t\t\treturn this.uniforms[ key ].value;\n\n\t\t\t\t},\n\n\t\t\t\tset( v ) {\n\n\t\t\t\t\tthis.uniforms[ key ].value = v;\n\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\t}\n\n\t\tthis.setValues( params );\n\n\t}\n\n}\n\nfunction init() {\n\n\toutputContainer = document.getElementById( 'output' );\n\tbenchmarkContainer = document.getElementById( 'benchmark' );\n\n\t// renderer setup\n\trenderer = new THREE.WebGLRenderer( { antialias: true } );\n\trenderer.setPixelRatio( window.devicePixelRatio );\n\trenderer.setSize( window.innerWidth, window.innerHeight );\n\trenderer.setClearColor( 0, 1 );\n\tdocument.body.appendChild( renderer.domElement );\n\n\t// render target\n\trenderTarget = new THREE.WebGLRenderTarget( 1, 1, {\n\t\tformat: THREE.RedFormat,\n\t\ttype: THREE.FloatType,\n\n\t\t// TODO: Use integer buffers once better supported in three.js\n\t\t// format: THREE.RedIntegerFormat,\n\t\t// type: THREE.UnsignedIntType,\n\t\t// internalFormat: 'R16UI'\n\t} );\n\n\tfsQuad = new FullScreenQuad( new TraverseMaterial( {\n\n\t\tmap: renderTarget.texture,\n\t\tdepthWrite: false,\n\n\t} ) );\n\n\t// scene setup\n\tscene = new THREE.Scene();\n\n\t// camera setup\n\tcamera = new THREE.PerspectiveCamera( 75, window.innerWidth / window.innerHeight, 0.1, 50 );\n\tcamera.position.set( - 2.5, 1.5, 2.5 );\n\tcamera.far = 100;\n\tcamera.updateProjectionMatrix();\n\n\tnew OrbitControls( camera, renderer.domElement );\n\n\twindow.addEventListener( 'resize', onResize, false );\n\tonResize();\n\n\t// Load dragon\n\tconst loader = new GLTFLoader();\n\tloader.load( modelPath, gltf => {\n\n\t\tgltf.scene.traverse( c => {\n\n\t\t\tif ( c.isMesh && c.name === 'Dragon' ) {\n\n\t\t\t\tmesh = c;\n\n\t\t\t}\n\n\t\t} );\n\n\t\tmesh.material = new THREE.MeshBasicMaterial( { colorWrite: false } );\n\t\tmesh.geometry.center();\n\t\tmesh.position.set( 0, 0, 0 );\n\t\tscene.add( mesh );\n\n\t\thelper = new MeshBVHVisualizer( mesh, 40 );\n\t\thelper.displayEdges = false;\n\t\thelper.displayParents = true;\n\t\thelper.color.set( 0xffffff );\n\t\thelper.opacity = 1;\n\t\thelper.depth = 40;\n\n\t\tconst material = helper.meshMaterial;\n\t\tmaterial.blending = THREE.CustomBlending;\n\t\tmaterial.blendDst = THREE.OneFactor;\n\n\t\tscene.add( helper );\n\n\t\tupdateBVH();\n\n\t\trunBenchmark( true );\n\n\t} );\n\n\tbenchmarkViz = new THREE.LineSegments();\n\tbenchmarkViz.material.opacity = 0.1;\n\tbenchmarkViz.material.transparent = true;\n\tbenchmarkViz.material.depthWrite = false;\n\tbenchmarkViz.frustumCulled = false;\n\tscene.add( benchmarkViz );\n\n\tconst gui = new GUI();\n\tconst bvhFolder = gui.addFolder( 'BVH' );\n\tbvhFolder.add( params.options, 'strategy', { CENTER, AVERAGE, SAH } );\n\tbvhFolder.add( params.options, 'maxLeafTris', 1, 30, 1 );\n\tbvhFolder.add( params.options, 'maxDepth', 1, 40, 1 );\n\tbvhFolder.add( params.options, 'rebuild' );\n\tbvhFolder.open();\n\n\tconst vizFolder = gui.addFolder( 'Visualization' );\n\tvizFolder.add( params.visualization, 'displayMesh' );\n\tvizFolder.add( params.visualization, 'simpleColors' );\n\tvizFolder.add( params.visualization, 'outline' );\n\tvizFolder.add( params.visualization, 'traversalThreshold', 1, 300, 1 );\n\tvizFolder.open();\n\n\tconst benchmarkFolder = gui.addFolder( 'Benchmark' );\n\tbenchmarkFolder.add( params.benchmark, 'displayRays' );\n\tbenchmarkFolder.add( params.benchmark, 'firstHitOnly' ).onChange( resetBenchmark );\n\tbenchmarkFolder.add( params.benchmark, 'castCount', 100, 5000, 1 ).onChange( () => {\n\n\t\tresetBenchmark();\n\t\trunBenchmark( true );\n\n\t} );\n\tbenchmarkFolder.add( params.benchmark, 'rotations', 1, 20, 1 ).onChange( () => {\n\n\t\tresetBenchmark();\n\t\trunBenchmark( true );\n\n\t} );\n\tbenchmarkFolder.open();\n\n\twindow.addEventListener( 'pointermove', e => {\n\n\t\tmouse.set( e.clientX, window.innerHeight - e.clientY );\n\n\t} );\n\n}\n\nfunction onResize() {\n\n\tcamera.aspect = window.innerWidth / window.innerHeight;\n\tcamera.updateProjectionMatrix();\n\n\trenderer.setSize( window.innerWidth, window.innerHeight );\n\trenderer.setPixelRatio( window.devicePixelRatio );\n\n\trenderTarget.setSize(\n\t\twindow.innerWidth * window.devicePixelRatio,\n\t\twindow.innerHeight * window.devicePixelRatio,\n\t);\n\n}\n\nfunction updateBVH() {\n\n\tconst startTime = performance.now();\n\tmesh.geometry.computeBoundsTree( {\n\t\tstrategy: parseInt( params.options.strategy ),\n\t\tmaxLeafTris: params.options.maxLeafTris,\n\t\tmaxDepth: params.options.maxDepth,\n\t} );\n\tconst deltaTime = performance.now() - startTime;\n\thelper.update();\n\n\tresetBenchmark();\n\n\tconst info = getBVHExtremes( mesh.geometry.boundsTree )[ 0 ];\n\toutputContainer.innerText =\n\t\t`construction time        : ${ deltaTime.toFixed( 2 ) }ms\\n` +\n\t\t`surface area score       : ${ info.surfaceAreaScore.toFixed( 2 ) }\\n` +\n\t\t`total nodes              : ${ info.nodeCount }\\n` +\n\t\t`total leaf nodes         : ${ info.leafNodeCount }\\n` +\n\t\t`min / max tris per leaf  : ${ info.tris.min } / ${ info.tris.max }\\n` +\n\t\t`min / max depth          : ${ info.depth.min } / ${ info.depth.max }\\n` +\n\t\t`memory (incl. geometry)  : ${ ( estimateMemoryInBytes( mesh.geometry.boundsTree ) * 1e-6 ).toFixed( 3 ) } mb \\n` +\n\t\t`memory (excl. geometry)  : ${ ( estimateMemoryInBytes( mesh.geometry.boundsTree._roots ) * 1e-6 ).toFixed( 3 ) } mb`;\n\n}\n\nfunction runBenchmark( updateGeom = false ) {\n\n\tlet points = null;\n\tlet newGeometry = null;\n\tif ( updateGeom ) {\n\n\t\tmesh.updateMatrixWorld();\n\t\tnewGeometry = new THREE.BufferGeometry();\n\t\tbenchmarkViz.geometry.dispose();\n\t\tpoints = [];\n\n\t}\n\n\tconst raycaster = new THREE.Raycaster();\n\traycaster.firstHitOnly = params.benchmark.firstHitOnly;\n\n\tconst rayCount = params.benchmark.castCount;\n\tconst rotations = params.benchmark.rotations;\n\tconst { ray } = raycaster;\n\tconst { origin, direction } = ray;\n\n\tconst startTime = performance.now();\n\tfor ( let i = 0; i < rayCount; i ++ ) {\n\n\t\tconst step = i / rayCount;\n\t\tconst y = step - 0.5;\n\t\torigin.set(\n\t\t\tMath.cos( 0.75 * Math.PI * y ) * Math.sin( rotations * 2 * Math.PI * i / rayCount ),\n\t\t\t2 * y,\n\t\t\tMath.cos( 0.75 * Math.PI * y ) * Math.cos( rotations * 2 * Math.PI * i / rayCount ),\n\t\t).multiplyScalar( 2.5 );\n\n\t\tdirection.set(\n\t\t\tMath.cos( rotations * 5 * y ),\n\t\t\tMath.sin( rotations * 10 * y ),\n\t\t\tMath.sin( rotations * 5 * y ),\n\t\t).sub( origin ).normalize();\n\n\t\traycaster.intersectObject( mesh );\n\n\t\tif ( updateGeom ) {\n\n\t\t\tconst hit = raycaster.intersectObject( mesh )[ 0 ];\n\n\t\t\tpoints.push( origin.clone() );\n\t\t\tif ( hit ) {\n\n\t\t\t\tpoints.push( hit.point.clone() );\n\n\t\t\t} else {\n\n\t\t\t\tconst v = new THREE.Vector3();\n\t\t\t\tray.at( 5, v );\n\t\t\t\tpoints.push( v );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tconst deltaTime = performance.now() - startTime;\n\n\tif ( updateGeom ) {\n\n\t\tnewGeometry.setFromPoints( points );\n\t\tbenchmarkViz.geometry = newGeometry;\n\n\t}\n\n\treturn deltaTime;\n\n}\n\nlet sampleCount = 0;\nlet currTime = 0;\n\nfunction resetBenchmark() {\n\n\tsampleCount = 0;\n\tcurrTime = 0;\n\n}\n\nfunction render() {\n\n\trequestAnimationFrame( render );\n\n\t// read the buffer from the last frame of rendering so we don't block\n\t// waiting for this frame to finish.\n\tconst pixelRatio = renderer.getPixelRatio();\n\trenderer.readRenderTargetPixels(\n\t\trenderTarget,\n\t\tmouse.x * pixelRatio, mouse.y * pixelRatio, 1, 1,\n\t\treadBuffer,\n\t);\n\n\tif ( mesh ) {\n\n\t\tsampleCount = Math.min( sampleCount + 1, 50 );\n\t\tcurrTime += ( runBenchmark() - currTime ) / sampleCount;\n\t\tbenchmarkContainer.innerText =\n\t\t\t`\\ntraversal depth at mouse : ${ Math.round( readBuffer[ 0 ] ) }\\n` +\n\t\t\t`benchmark rolling avg    : ${ currTime.toFixed( 3 ) } ms`;\n\n\t}\n\n\tif ( params.visualization.simpleColors ) {\n\n\t\tfsQuad.material.boundsColor.set( 0xffffff );\n\t\tfsQuad.material.thresholdColor.set( 0xff0000 );\n\t\tfsQuad.material.backgroundColor.set( 0x000000 );\n\n\t} else {\n\n\t\tfsQuad.material.boundsColor.set( BOUNDS_COLOR );\n\t\tfsQuad.material.thresholdColor.set( THRESHOLD_COLOR );\n\t\tfsQuad.material.backgroundColor.set( BG_COLOR );\n\n\t}\n\n\tfsQuad.material.threshold = params.visualization.traversalThreshold;\n\tfsQuad.material.outlineAlpha = params.visualization.outline ? 0.5 : 0.0;\n\tfsQuad.material.resolution.set( renderTarget.width, renderTarget.height );\n\n\t// render bvh\n\tbenchmarkViz.visible = false;\n\trenderer.autoClear = true;\n\tif ( mesh ) mesh.visible = params.visualization.displayMesh;\n\trenderer.setRenderTarget( renderTarget );\n\trenderer.render( scene, camera );\n\n\trenderer.setRenderTarget( null );\n\tfsQuad.render( renderer );\n\n\t// render rays\n\trenderer.autoClear = false;\n\tbenchmarkViz.visible = params.benchmark.displayRays;\n\n\tif ( mesh ) renderer.render( mesh, camera );\n\trenderer.render( benchmarkViz, camera );\n\n}\n\n\ninit();\nrender();\n"],"names":["$e197b6c71eccd9b4$var$scene","$e197b6c71eccd9b4$var$camera","$e197b6c71eccd9b4$var$renderer","$e197b6c71eccd9b4$var$helper","$e197b6c71eccd9b4$var$mesh","$e197b6c71eccd9b4$var$outputContainer","$e197b6c71eccd9b4$var$benchmarkContainer","$e197b6c71eccd9b4$var$benchmarkViz","$e197b6c71eccd9b4$var$renderTarget","$e197b6c71eccd9b4$var$fsQuad","$hGT0Q","Mesh","prototype","raycast","$aBPXg","acceleratedRaycast","BufferGeometry","computeBoundsTree","disposeBoundsTree","$e197b6c71eccd9b4$var$mouse","Vector2","$e197b6c71eccd9b4$var$readBuffer","Float32Array","$e197b6c71eccd9b4$var$params","options","strategy","SAH","maxLeafTris","maxDepth","rebuild","$e197b6c71eccd9b4$var$updateBVH","visualization","displayMesh","simpleColors","outline","traversalThreshold","benchmark","displayRays","firstHitOnly","rotations","castCount","$e197b6c71eccd9b4$var$TraverseMaterial","ShaderMaterial","params","super","uniforms","map","value","threshold","boundsColor","Color","backgroundColor","thresholdColor","resolution","outlineAlpha","vertexShader","this","key","Object","defineProperty","get","set","v","setValues","$e197b6c71eccd9b4$var$onResize","aspect","window","innerWidth","innerHeight","updateProjectionMatrix","setSize","setPixelRatio","devicePixelRatio","startTime","performance","now","geometry","parseInt","deltaTime","update","info","getBVHExtremes","boundsTree","innerText","toFixed","surfaceAreaScore","nodeCount","leafNodeCount","tris","min","max","depth","estimateMemoryInBytes","_roots","$e197b6c71eccd9b4$var$runBenchmark","updateGeom","points","newGeometry","updateMatrixWorld","dispose","raycaster","Raycaster","rayCount","ray","origin","direction","i","y","Math","cos","PI","sin","multiplyScalar","sub","normalize","intersectObject","hit","push","clone","point","document","getElementById","WebGLRenderer","antialias","setClearColor","body","appendChild","domElement","WebGLRenderTarget","format","RedFormat","type","FloatType","$hwk6U","FullScreenQuad","texture","depthWrite","Scene","PerspectiveCamera","position","far","$W2bOH","OrbitControls","addEventListener","$4EHgc","GLTFLoader","load","gltf","scene","traverse","c","isMesh","name","material","MeshBasicMaterial","colorWrite","center","add","MeshBVHVisualizer","displayEdges","displayParents","color","opacity","meshMaterial","blending","CustomBlending","blendDst","OneFactor","LineSegments","transparent","frustumCulled","gui","$4Q0VG","GUI","bvhFolder","addFolder","CENTER","AVERAGE","open","vizFolder","benchmarkFolder","onChange","$e197b6c71eccd9b4$var$resetBenchmark","e","clientX","clientY"],"version":3,"file":"inspector.f4122255.js.map"}