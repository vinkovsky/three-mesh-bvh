{"mappings":"yhBACUA,EAAEC,wEAAFD,EAA8IE,EAA5ID,EAAiJ,WAAW,IAAID,EAAE,oBAAoBC,EAAEE,GAAwB,OAArBC,EAAEC,YAAYF,EAAEG,KAAYH,WAAWI,EAAEJ,GAAG,IAAI,IAAIK,EAAE,EAAEA,EAAEJ,EAAEK,SAASC,OAAOF,IAAIJ,EAAEK,SAASD,GAAGG,MAAMC,QAAQJ,IAAIL,EAAE,QAAQ,OAAOU,EAAEV,EAAE,IAAIU,EAAE,EAAET,EAAEU,SAASC,cAAc,OAAOX,EAAEO,MAAMK,QAAQ,uEAAuEZ,EAAEa,iBAAiB,SAAQ,SAASd,GAAGA,EAAEe,iBACpfX,IAAIM,EAAET,EAAEK,SAASC,WAAQ,GAAK,IAAIS,GAAGC,aAAaC,MAAMC,MAAMC,EAAEJ,EAAEhB,EAAE,EAAEqB,EAAEvB,EAAE,IAAID,EAAEyB,MAAM,MAAM,OAAO,SAASC,EAAEzB,EAAE,IAAID,EAAEyB,MAAM,KAAK,OAAO,SAAS,GAAGE,KAAKP,aAAaO,KAAKP,YAAYQ,OAAO,IAAIC,EAAE5B,EAAE,IAAID,EAAEyB,MAAM,KAAK,OAAO,SAAc,OAALlB,EAAE,GAAS,CAACuB,SAAS,GAAGxB,IAAIF,EAAE2B,SAAS9B,EAAE+B,UAAUzB,EAAE0B,MAAM,WAAWd,GAAGC,aAAaC,MAAMC,OAAOY,IAAI,WAAW/B,IAAI,IAAIC,GAAGgB,aAAaC,MAAMC,MAAwB,GAAlBI,EAAES,OAAO/B,EAAEe,EAAE,KAAQf,EAAEmB,EAAE,MAAMC,EAAEW,OAAO,IAAIhC,GAAGC,EAAEmB,GAAG,KAAKA,EAAEnB,EAAED,EAAE,EAAE0B,GAAG,CAAC,IAAIrB,EAAEY,YAAYQ,OAAOC,EAAEM,OAAO3B,EAAE4B,eACte,QAAQ5B,EAAE6B,gBAAgB,SAAS,OAAOjC,GAAG+B,OAAO,WAAWhB,EAAEmB,KAAKJ,OAAOK,WAAWnC,EAAEoC,QAAQjC,IAC2R,OADvRP,EAAEyB,MAAM,SAASxB,EAAED,EAAEa,GAAG,IAAIT,EAAEqC,EAAAA,EAAStB,EAAE,EAAEI,EAAEmB,KAAKC,MAAMxC,EAAEoB,EAAEqB,OAAOC,kBAAkB,GAAGrB,EAAE,GAAGrB,EAAEuB,EAAE,GAAGvB,EAAE0B,EAAE,EAAE1B,EAAE2C,EAAE,EAAE3C,EAAEK,EAAE,EAAEL,EAAE4C,EAAE,GAAG5C,EAAE6C,EAAE,GAAG7C,EAAE8C,EAAE,GAAG9C,EAAE+C,EAAEpC,SAASC,cAAc,UAAUmC,EAAEC,MAAM3B,EAAE0B,EAAEE,OAAO1B,EAAEwB,EAAEvC,MAAMK,QAAQ,yBAAyB,IAAIqC,EAAEH,EAAEI,WAAW,MAChS,OADsSD,EAAEE,KAAK,QAAQ,EAAEpD,EAAE,gCAAgCkD,EAAEG,aAAa,MAAMH,EAAEI,UAAU5C,EAAEwC,EAAEK,SAAS,EAAE,EAAElC,EAAEE,GAAG2B,EAAEI,UAAUzD,EAAEqD,EAAEM,SAAS1D,EAAE4B,EAAEiB,GACpfO,EAAEK,SAASlD,EAAEuC,EAAEC,EAAEC,GAAGI,EAAEI,UAAU5C,EAAEwC,EAAEO,YAAY,GAAGP,EAAEK,SAASlD,EAAEuC,EAAEC,EAAEC,GAAS,CAAC3C,IAAI4C,EAAEf,OAAO,SAAST,EAAEmC,GAAGzD,EAAEsC,KAAKoB,IAAI1D,EAAEsB,GAAGP,EAAEuB,KAAKqB,IAAI5C,EAAEO,GAAG2B,EAAEI,UAAU5C,EAAEwC,EAAEO,YAAY,EAAEP,EAAEK,SAAS,EAAE,EAAElC,EAAEuB,GAAGM,EAAEI,UAAUzD,EAAEqD,EAAEM,SAASpC,EAAEG,GAAG,IAAIzB,EAAE,KAAKsB,EAAEnB,GAAG,IAAImB,EAAEJ,GAAG,IAAIU,EAAEiB,GAAGO,EAAEW,UAAUd,EAAE1C,EAAEL,EAAE4C,EAAEC,EAAE7C,EAAE8C,EAAEzC,EAAEuC,EAAEC,EAAE7C,EAAE8C,GAAGI,EAAEK,SAASlD,EAAEwC,EAAE7C,EAAE4C,EAAE5C,EAAE8C,GAAGI,EAAEI,UAAU5C,EAAEwC,EAAEO,YAAY,GAAGP,EAAEK,SAASlD,EAAEwC,EAAE7C,EAAE4C,EAAE5C,EAAEoB,GAAG,EAAEG,EAAEmC,GAAGZ,OAAcjD,GAHrX,iBAAkBE,EAAqCA,EAAeD,IAAI,mBAAoBgE,QAAQA,OAAOC,IAAID,OAAOhE,GAAGD,EAAEmE,MAAMlE,kCCWlJ,MAAMmE,EAAS,CACdC,kBAAkB,EAClBC,oBAAoB,EACpBC,gBAAiB,GAAM3B,OAAOC,iBAC9B2B,QAAS,EACTC,YAAY,GAGb,IAAIC,EAAUC,EAAQC,EAAOC,EAAKC,EAC9BC,EAAQC,EAAWC,EAAcC,EAEjCC,EADAC,EAAU,yQASbV,EAAW,IAAIW,EAAAC,cAAqB,CAAEC,WAAW,IACjDb,EAASc,cAAe5C,OAAOC,kBAC/B6B,EAASe,cAAe,QACxBf,EAASgB,QAAS9C,OAAO+C,WAAY/C,OAAOgD,aAC5ClB,EAASmB,eAAiBR,EAAAS,aAC1BhF,SAASiF,KAAK1F,YAAaqE,EAASnC,YAEpC4C,EAAkBrE,SAASkF,eAAgB,UAG3CpB,EAAQ,IAAIS,EAAAY,MAEZ,MAAMC,EAAQ,IAAIb,EAAAc,iBAAwB,SAAU,GACpDD,EAAME,SAASC,IAAK,EAAG,EAAG,GAC1BzB,EAAM0B,IAAKJ,GACXtB,EAAM0B,IAAK,IAAIjB,EAAAkB,aAAoB,SAAU,KAG7C5B,EAAS,IAAIU,EAAAmB,kBAAyB,GAAI5D,OAAO+C,WAAa/C,OAAOgD,YAAa,GAAK,IACvFjB,EAAOyB,SAASC,KAAK,EAAK,EAAG,GAC7B1B,EAAO8B,IAAM,IACb9B,EAAO+B,yBAGP5B,EAAQ,IAAI6B,EAAAzG,IACZY,SAASiF,KAAK1F,YAAayE,EAAMxE,KAIjC,MAAMsG,EAAa,IAAIvB,EAAAwB,eAAsB,CAE5CC,QAAS,CACRC,QAAS,GAGVC,SAAU,CACTC,IAAK,CAAEC,MAAO,IAAIC,EAAAC,sBAClBC,gBAAiB,CAAEH,MAAO,IAAIC,EAAAG,6BAC9BC,kBAAmB,CAAEL,MAAO,IAAI7B,EAAAmC,SAChCC,oBAAqB,CAAEP,MAAO,IAAI7B,EAAAmC,SAClCE,KAAM,CAAER,MAAO,GACfS,QAAS,CAAET,MAAO,IAGnBU,aAAwB,yPAiIxBC,eAAC,oHAKkDC,0BAAuBC,89HAxL5EC,2vBACAC","sources":["node_modules/stats.js/build/stats.min.js","example/gpuPathTracing.js"],"sourcesContent":["// stats.js - http://github.com/mrdoob/stats.js\n(function(f,e){\"object\"===typeof exports&&\"undefined\"!==typeof module?module.exports=e():\"function\"===typeof define&&define.amd?define(e):f.Stats=e()})(this,function(){var f=function(){function e(a){c.appendChild(a.dom);return a}function u(a){for(var d=0;d<c.children.length;d++)c.children[d].style.display=d===a?\"block\":\"none\";l=a}var l=0,c=document.createElement(\"div\");c.style.cssText=\"position:fixed;top:0;left:0;cursor:pointer;opacity:0.9;z-index:10000\";c.addEventListener(\"click\",function(a){a.preventDefault();\nu(++l%c.children.length)},!1);var k=(performance||Date).now(),g=k,a=0,r=e(new f.Panel(\"FPS\",\"#0ff\",\"#002\")),h=e(new f.Panel(\"MS\",\"#0f0\",\"#020\"));if(self.performance&&self.performance.memory)var t=e(new f.Panel(\"MB\",\"#f08\",\"#201\"));u(0);return{REVISION:16,dom:c,addPanel:e,showPanel:u,begin:function(){k=(performance||Date).now()},end:function(){a++;var c=(performance||Date).now();h.update(c-k,200);if(c>g+1E3&&(r.update(1E3*a/(c-g),100),g=c,a=0,t)){var d=performance.memory;t.update(d.usedJSHeapSize/\n1048576,d.jsHeapSizeLimit/1048576)}return c},update:function(){k=this.end()},domElement:c,setMode:u}};f.Panel=function(e,f,l){var c=Infinity,k=0,g=Math.round,a=g(window.devicePixelRatio||1),r=80*a,h=48*a,t=3*a,v=2*a,d=3*a,m=15*a,n=74*a,p=30*a,q=document.createElement(\"canvas\");q.width=r;q.height=h;q.style.cssText=\"width:80px;height:48px\";var b=q.getContext(\"2d\");b.font=\"bold \"+9*a+\"px Helvetica,Arial,sans-serif\";b.textBaseline=\"top\";b.fillStyle=l;b.fillRect(0,0,r,h);b.fillStyle=f;b.fillText(e,t,v);\nb.fillRect(d,m,n,p);b.fillStyle=l;b.globalAlpha=.9;b.fillRect(d,m,n,p);return{dom:q,update:function(h,w){c=Math.min(c,h);k=Math.max(k,h);b.fillStyle=l;b.globalAlpha=1;b.fillRect(0,0,r,m);b.fillStyle=f;b.fillText(g(h)+\" \"+e+\" (\"+g(c)+\"-\"+g(k)+\")\",t,v);b.drawImage(q,d+a,m,n-a,p,d,m,n-a,p);b.fillRect(d+n-a,m,a,p);b.fillStyle=l;b.globalAlpha=.9;b.fillRect(d+n-a,m,a,g((1-h/w)*p))}}};return f});\n","import * as THREE from 'three';\nimport { FullScreenQuad } from 'three/examples/jsm/postprocessing/Pass.js';\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader.js';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';\nimport { mergeBufferGeometries } from 'three/examples/jsm/utils/BufferGeometryUtils.js';\nimport Stats from 'stats.js';\nimport { GUI } from 'dat.gui';\nimport {\n\tMeshBVH, MeshBVHUniformStruct, FloatVertexAttributeTexture,\n\tshaderStructs, shaderIntersectFunction, SAH,\n} from '..';\n\nconst params = {\n\tenableRaytracing: true,\n\tsmoothImageScaling: true,\n\tresolutionScale: 0.5 / window.devicePixelRatio,\n\tbounces: 3,\n\taccumulate: true,\n};\n\nlet renderer, camera, scene, gui, stats;\nlet rtQuad, finalQuad, renderTarget, mesh;\nlet samples = 0;\nlet outputContainer;\n\ninit();\nrender();\n\nfunction init() {\n\n\t// renderer setup\n\trenderer = new THREE.WebGLRenderer( { antialias: false } );\n\trenderer.setPixelRatio( window.devicePixelRatio );\n\trenderer.setClearColor( 0x09141a );\n\trenderer.setSize( window.innerWidth, window.innerHeight );\n\trenderer.outputEncoding = THREE.sRGBEncoding;\n\tdocument.body.appendChild( renderer.domElement );\n\n\toutputContainer = document.getElementById( 'output' );\n\n\t// scene setup\n\tscene = new THREE.Scene();\n\n\tconst light = new THREE.DirectionalLight( 0xffffff, 1 );\n\tlight.position.set( 1, 1, 1 );\n\tscene.add( light );\n\tscene.add( new THREE.AmbientLight( 0xb0bec5, 0.5 ) );\n\n\t// camera setup\n\tcamera = new THREE.PerspectiveCamera( 75, window.innerWidth / window.innerHeight, 0.1, 50 );\n\tcamera.position.set( - 2, 2, 3 );\n\tcamera.far = 100;\n\tcamera.updateProjectionMatrix();\n\n\t// stats setup\n\tstats = new Stats();\n\tdocument.body.appendChild( stats.dom );\n\n\t// hand-tuned ray origin offset values to accommodate floating point error. Mobile offset\n\t// tuned from Pixel 3 device that reports as highp but seemingly has low precision.\n\tconst rtMaterial = new THREE.ShaderMaterial( {\n\n\t\tdefines: {\n\t\t\tBOUNCES: 5,\n\t\t},\n\n\t\tuniforms: {\n\t\t\tbvh: { value: new MeshBVHUniformStruct() },\n\t\t\tnormalAttribute: { value: new FloatVertexAttributeTexture() },\n\t\t\tcameraWorldMatrix: { value: new THREE.Matrix4() },\n\t\t\tinvProjectionMatrix: { value: new THREE.Matrix4() },\n\t\t\tseed: { value: 0 },\n\t\t\topacity: { value: 1 },\n\t\t},\n\n\t\tvertexShader: /* glsl */`\n\n\t\t\tvarying vec2 vUv;\n\t\t\tvoid main() {\n\n\t\t\t\tvec4 mvPosition = vec4( position, 1.0 );\n\t\t\t\tmvPosition = modelViewMatrix * mvPosition;\n\t\t\t\tgl_Position = projectionMatrix * mvPosition;\n\n\t\t\t\tvUv = uv;\n\n\t\t\t}\n\n\t\t`,\n\n\t\tfragmentShader: /* glsl */`\n\t\t\t#define RAY_OFFSET 1e-5\n\n\t\t\tprecision highp isampler2D;\n\t\t\tprecision highp usampler2D;\n\t\t\t${ shaderStructs }\n\t\t\t${ shaderIntersectFunction }\n\t\t\t#include <common>\n\n\t\t\tuniform mat4 cameraWorldMatrix;\n\t\t\tuniform mat4 invProjectionMatrix;\n\t\t\tuniform sampler2D normalAttribute;\n\t\t\tuniform BVH bvh;\n\t\t\tuniform float seed;\n\t\t\tuniform float opacity;\n\t\t\tvarying vec2 vUv;\n\n\t\t\tvoid main() {\n\n\t\t\t\t// get [-1, 1] normalized device coordinates\n\t\t\t\tvec2 ndc = 2.0 * vUv - vec2( 1.0 );\n\t\t\t\tvec3 rayOrigin, rayDirection;\n\t\t\t\tndcToCameraRay( ndc, cameraWorldMatrix, invProjectionMatrix, rayOrigin, rayDirection );\n\n\t\t\t\t// Lambertian render\n\t\t\t\tgl_FragColor = vec4( 0.0 );\n\n\t\t\t\tvec3 throughputColor = vec3( 1.0 );\n\t\t\t\tvec3 randomPoint = vec3( .0 );\n\n\t\t\t\t// hit results\n\t\t\t\tuvec4 faceIndices = uvec4( 0u );\n\t\t\t\tvec3 faceNormal = vec3( 0.0, 0.0, 1.0 );\n\t\t\t\tvec3 barycoord = vec3( 0.0 );\n\t\t\t\tfloat side = 1.0;\n\t\t\t\tfloat dist = 0.0;\n\n\t\t\t\tfor ( int i = 0; i < BOUNCES; i ++ ) {\n\n\t\t\t\t\tif ( ! bvhIntersectFirstHit( bvh, rayOrigin, rayDirection, faceIndices, faceNormal, barycoord, side, dist ) ) {\n\n\t\t\t\t\t\tfloat value = ( rayDirection.y + 0.5 ) / 1.5;\n\t\t\t\t\t\tvec3 skyColor = mix( vec3( 1.0 ), vec3( 0.75, 0.85, 1.0 ), value );\n\n\t\t\t\t\t\tgl_FragColor = vec4( skyColor * throughputColor * 2.0, 1.0 );\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// 1 / PI attenuation for physically correct lambert model\n\t\t\t\t\t// https://www.rorydriscoll.com/2009/01/25/energy-conservation-in-games/\n\t\t\t\t\tthroughputColor *= 1.0 / PI;\n\n\t\t\t\t\trandomPoint = vec3(\n\t\t\t\t\t\trand( vUv + float( i + 1 ) + vec2( seed, seed ) ),\n\t\t\t\t\t\trand( - vUv * seed + float( i ) - seed ),\n\t\t\t\t\t\trand( - vUv * float( i + 1 ) - vec2( seed, - seed ) )\n\t\t\t\t\t);\n\t\t\t\t\trandomPoint -= 0.5;\n\t\t\t\t\trandomPoint *= 2.0;\n\n\t\t\t\t\t// ensure the random vector is not 0,0,0 and that it won't exactly negate\n\t\t\t\t\t// the surface normal\n\n\t\t\t\t\tfloat pointLength = max( length( randomPoint ), 1e-4 );\n\t\t\t\t\trandomPoint /= pointLength;\n\t\t\t\t\trandomPoint *= 0.999;\n\n\t\t\t\t\t// fetch the interpolated smooth normal\n\t\t\t\t\tvec3 normal =\n\t\t\t\t\t\tside *\n\t\t\t\t\t\ttextureSampleBarycoord(\n\t\t\t\t\t\t\tnormalAttribute,\n\t\t\t\t\t\t\tbarycoord,\n\t\t\t\t\t\t\tfaceIndices.xyz\n\t\t\t\t\t\t).xyz;\n\n\t\t\t\t\t// adjust the hit point by the surface normal by a factor of some offset and the\n\t\t\t\t\t// maximum component-wise value of the current point to accommodate floating point\n\t\t\t\t\t// error as values increase.\n\t\t\t\t\tvec3 point = rayOrigin + rayDirection * dist;\n\t\t\t\t\tvec3 absPoint = abs( point );\n\t\t\t\t\tfloat maxPoint = max( absPoint.x, max( absPoint.y, absPoint.z ) );\n\t\t\t\t\trayOrigin = point + faceNormal * ( maxPoint + 1.0 ) * RAY_OFFSET;\n\t\t\t\t\trayDirection = normalize( normal + randomPoint );\n\n\t\t\t\t}\n\n\t\t\t\tgl_FragColor.a = opacity;\n\n\t\t\t}\n\n\t\t`\n\n\t} );\n\n\trtQuad = new FullScreenQuad( rtMaterial );\n\trtMaterial.transparent = true;\n\trtMaterial.depthWrite = false;\n\n\t// load mesh and set up material BVH attributes\n\tnew GLTFLoader().load( '../models/DragonAttenuation.glb', gltf => {\n\n\t\tlet dragonMesh;\n\t\tgltf.scene.traverse( c => {\n\n\t\t\tif ( c.isMesh && c.name === 'Dragon' ) {\n\n\t\t\t\tdragonMesh = c;\n\t\t\t\tc.geometry.scale( 0.25, 0.25, 0.25 ).rotateX( Math.PI / 2 );\n\n\t\t\t}\n\n\t\t} );\n\n\t\tconst planeGeom = new THREE.PlaneBufferGeometry( 5, 5, 1, 1 );\n\t\tplaneGeom.rotateX( - Math.PI / 2 );\n\n\t\tconst merged = mergeBufferGeometries( [ planeGeom, dragonMesh.geometry ], false );\n\t\tmerged.translate( 0, - 0.5, 0 );\n\n\t\tmesh = new THREE.Mesh( merged, new THREE.MeshStandardMaterial() );\n\t\tscene.add( mesh );\n\n\t\tconst bvh = new MeshBVH( mesh.geometry, { maxLeafTris: 1, strategy: SAH } );\n\t\trtMaterial.uniforms.bvh.value.updateFrom( bvh );\n\t\trtMaterial.uniforms.normalAttribute.value.updateFrom( mesh.geometry.attributes.normal );\n\n\t} );\n\n\n\trenderTarget = new THREE.WebGLRenderTarget( 1, 1, {\n\n\t\tformat: THREE.RGBAFormat,\n\t\ttype: THREE.FloatType,\n\n\t} );\n\n\tfinalQuad = new FullScreenQuad( new THREE.MeshBasicMaterial( {\n\n\t\tmap: renderTarget.texture,\n\n\t} ) );\n\n\tconst controls = new OrbitControls( camera, renderer.domElement );\n\tcontrols.addEventListener( 'change', () => {\n\n\t\tresetSamples();\n\n\t} );\n\n\tgui = new GUI();\n\tgui.add( params, 'enableRaytracing' ).name( 'enable' );\n\tgui.add( params, 'accumulate' );\n\tgui.add( params, 'smoothImageScaling' );\n\tgui.add( params, 'resolutionScale', 0.1, 1, 0.01 ).onChange( resize );\n\tgui.add( params, 'bounces', 1, 10, 1 ).onChange( v => {\n\n\t\trtMaterial.defines.BOUNCES = parseInt( v );\n\t\trtMaterial.needsUpdate = true;\n\t\tresetSamples();\n\n\t} );\n\tgui.open();\n\n\twindow.addEventListener( 'resize', resize, false );\n\tresize();\n\n}\n\nfunction resetSamples() {\n\n\tsamples = 0;\n\n}\n\nfunction resize() {\n\n\tcamera.aspect = window.innerWidth / window.innerHeight;\n\tcamera.updateProjectionMatrix();\n\n\tconst w = window.innerWidth;\n\tconst h = window.innerHeight;\n\tconst dpr = window.devicePixelRatio * params.resolutionScale;\n\trenderer.setSize( w, h );\n\trenderer.setPixelRatio( dpr );\n\n\trenderTarget.setSize( w * dpr, h * dpr );\n\n\tresetSamples();\n\n}\n\nfunction render() {\n\n\tstats.update();\n\trequestAnimationFrame( render );\n\n\trenderer.domElement.style.imageRendering = params.smoothImageScaling ? 'auto' : 'pixelated';\n\n\tif ( mesh && params.enableRaytracing ) {\n\n\t\t// jitter camera for AA\n\t\tif ( params.accumulate ) {\n\n\t\t\tif ( samples === 0 ) {\n\n\t\t\t\tcamera.clearViewOffset();\n\n\t\t\t} else {\n\n\t\t\t\tconst w = renderTarget.width;\n\t\t\t\tconst h = renderTarget.height;\n\t\t\t\tcamera.setViewOffset(\n\t\t\t\t\tw, h,\n\t\t\t\t\tMath.random() - 0.5, Math.random() - 0.5,\n\t\t\t\t\tw, h,\n\t\t\t\t);\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tresetSamples();\n\n\t\t}\n\n\t\tcamera.updateMatrixWorld();\n\n\t\t// update material\n\t\t// keep appending a value that doesn't divide evenly into 2 so we have a different seed every frame\n\t\tconst seed = ( rtQuad.material.uniforms.seed.value + 0.11111 ) % 2;\n\t\trtQuad.material.uniforms.seed.value = seed;\n\t\trtQuad.material.uniforms.cameraWorldMatrix.value.copy( camera.matrixWorld );\n\t\trtQuad.material.uniforms.invProjectionMatrix.value.copy( camera.projectionMatrixInverse );\n\t\trtQuad.material.uniforms.opacity.value = 1 / ( samples + 1 );\n\n\t\t// render float target\n\t\trenderer.autoClear = samples === 0;\n\t\trenderer.setRenderTarget( renderTarget );\n\t\trtQuad.render( renderer );\n\n\t\t// render to screen\n\t\trenderer.setRenderTarget( null );\n\t\tfinalQuad.render( renderer );\n\n\t\trenderer.autoClear = true;\n\t\tsamples ++;\n\n\t} else {\n\n\t\tresetSamples();\n\t\tcamera.clearViewOffset();\n\t\trenderer.render( scene, camera );\n\n\t}\n\n\toutputContainer.innerText = `samples: ${ samples }`;\n\n}\n"],"names":["f","e","$f4c59361c37dab96$exports","a","c","appendChild","dom","u","d","children","length","style","display","l","document","createElement","cssText","addEventListener","preventDefault","k","performance","Date","now","g","r","Panel","h","self","memory","t","REVISION","addPanel","showPanel","begin","end","update","usedJSHeapSize","jsHeapSizeLimit","this","domElement","setMode","Infinity","Math","round","window","devicePixelRatio","v","m","n","p","q","width","height","b","getContext","font","textBaseline","fillStyle","fillRect","fillText","globalAlpha","w","min","max","drawImage","define","amd","Stats","$4969823e81d31d2d$var$params","enableRaytracing","smoothImageScaling","resolutionScale","bounces","accumulate","$4969823e81d31d2d$var$renderer","$4969823e81d31d2d$var$camera","$4969823e81d31d2d$var$scene","$4969823e81d31d2d$var$gui","$4969823e81d31d2d$var$stats","$4969823e81d31d2d$var$rtQuad","$4969823e81d31d2d$var$finalQuad","$4969823e81d31d2d$var$renderTarget","$4969823e81d31d2d$var$mesh","$4969823e81d31d2d$var$outputContainer","$4969823e81d31d2d$var$samples","$hGT0Q","WebGLRenderer","antialias","setPixelRatio","setClearColor","setSize","innerWidth","innerHeight","outputEncoding","sRGBEncoding","body","getElementById","Scene","light","DirectionalLight","position","set","add","AmbientLight","PerspectiveCamera","far","updateProjectionMatrix","$parcel$interopDefault","rtMaterial","ShaderMaterial","defines","BOUNCES","uniforms","bvh","value","$aBPXg","MeshBVHUniformStruct","normalAttribute","FloatVertexAttributeTexture","cameraWorldMatrix","Matrix4","invProjectionMatrix","seed","opacity","vertexShader","fragmentShader","shaderStructs","shaderIntersectFunction","$4969823e81d31d2d$var$init","$4969823e81d31d2d$var$render"],"version":3,"file":"gpuPathTracing.15c03c9e.js.map"}