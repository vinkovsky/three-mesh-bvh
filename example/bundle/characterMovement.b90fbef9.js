function e(e,t,r,o){Object.defineProperty(e,t,{get:r,set:o,enumerable:!0,configurable:!0})}var t="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof self?self:"undefined"!=typeof window?window:"undefined"!=typeof global?global:{},r={},o={},i=t.parcelRequire4485;null==i&&((i=function(e){if(e in r)return r[e].exports;if(e in o){var t=o[e];delete o[e];var i={id:e,exports:{}};return r[e]=i,t.call(i.exports,i,i.exports),i.exports}var n=new Error("Cannot find module '"+e+"'");throw n.code="MODULE_NOT_FOUND",n}).register=function(e,t){o[e]=t},t.parcelRequire4485=i),i.register("7N5zk",(function(t,r){e(t.exports,"mergeBufferGeometries",(()=>n)),e(t.exports,"mergeVertices",(()=>u));var o=i("hGT0Q");function n(e,t=!1){const r=null!==e[0].index,i=new Set(Object.keys(e[0].attributes)),n=new Set(Object.keys(e[0].morphAttributes)),u={},l={},f=e[0].morphTargetsRelative,a=new o.BufferGeometry;let m=0;for(let o=0;o<e.length;++o){const s=e[o];let c=0;if(r!==(null!==s.index))return console.error("THREE.BufferGeometryUtils: .mergeBufferGeometries() failed with geometry at index "+o+". All geometries must have compatible attributes; make sure index attribute exists among all geometries, or in none of them."),null;for(const e in s.attributes){if(!i.has(e))return console.error("THREE.BufferGeometryUtils: .mergeBufferGeometries() failed with geometry at index "+o+'. All geometries must have compatible attributes; make sure "'+e+'" attribute exists among all geometries, or in none of them.'),null;void 0===u[e]&&(u[e]=[]),u[e].push(s.attributes[e]),c++}if(c!==i.size)return console.error("THREE.BufferGeometryUtils: .mergeBufferGeometries() failed with geometry at index "+o+". Make sure all geometries have the same number of attributes."),null;if(f!==s.morphTargetsRelative)return console.error("THREE.BufferGeometryUtils: .mergeBufferGeometries() failed with geometry at index "+o+". .morphTargetsRelative must be consistent throughout all geometries."),null;for(const e in s.morphAttributes){if(!n.has(e))return console.error("THREE.BufferGeometryUtils: .mergeBufferGeometries() failed with geometry at index "+o+".  .morphAttributes must be consistent throughout all geometries."),null;void 0===l[e]&&(l[e]=[]),l[e].push(s.morphAttributes[e])}if(a.userData.mergedUserData=a.userData.mergedUserData||[],a.userData.mergedUserData.push(s.userData),t){let e;if(r)e=s.index.count;else{if(void 0===s.attributes.position)return console.error("THREE.BufferGeometryUtils: .mergeBufferGeometries() failed with geometry at index "+o+". The geometry must have either an index or a position attribute"),null;e=s.attributes.position.count}a.addGroup(m,e,o),m+=e}}if(r){let t=0;const r=[];for(let o=0;o<e.length;++o){const i=e[o].index;for(let e=0;e<i.count;++e)r.push(i.getX(e)+t);t+=e[o].attributes.position.count}a.setIndex(r)}for(const e in u){const t=s(u[e]);if(!t)return console.error("THREE.BufferGeometryUtils: .mergeBufferGeometries() failed while trying to merge the "+e+" attribute."),null;a.setAttribute(e,t)}for(const e in l){const t=l[e][0].length;if(0===t)break;a.morphAttributes=a.morphAttributes||{},a.morphAttributes[e]=[];for(let r=0;r<t;++r){const t=[];for(let o=0;o<l[e].length;++o)t.push(l[e][o][r]);const o=s(t);if(!o)return console.error("THREE.BufferGeometryUtils: .mergeBufferGeometries() failed while trying to merge the "+e+" morphAttribute."),null;a.morphAttributes[e].push(o)}}return a}function s(e){let t,r,i,n=0;for(let o=0;o<e.length;++o){const s=e[o];if(s.isInterleavedBufferAttribute)return console.error("THREE.BufferGeometryUtils: .mergeBufferAttributes() failed. InterleavedBufferAttributes are not supported."),null;if(void 0===t&&(t=s.array.constructor),t!==s.array.constructor)return console.error("THREE.BufferGeometryUtils: .mergeBufferAttributes() failed. BufferAttribute.array must be of consistent array types across matching attributes."),null;if(void 0===r&&(r=s.itemSize),r!==s.itemSize)return console.error("THREE.BufferGeometryUtils: .mergeBufferAttributes() failed. BufferAttribute.itemSize must be consistent across matching attributes."),null;if(void 0===i&&(i=s.normalized),i!==s.normalized)return console.error("THREE.BufferGeometryUtils: .mergeBufferAttributes() failed. BufferAttribute.normalized must be consistent across matching attributes."),null;n+=s.array.length}const s=new t(n);let u=0;for(let t=0;t<e.length;++t)s.set(e[t].array,u),u+=e[t].array.length;return new o.BufferAttribute(s,r,i)}function u(e,t=1e-4){t=Math.max(t,Number.EPSILON);const r={},i=e.getIndex(),n=e.getAttribute("position"),s=i?i.count:n.count;let u=0;const l=Object.keys(e.attributes),f={},a={},m=[],c=["getX","getY","getZ","getW"];for(let t=0,r=l.length;t<r;t++){const r=l[t];f[r]=[];const o=e.morphAttributes[r];o&&(a[r]=new Array(o.length).fill().map((()=>[])))}const g=Math.log10(1/t),h=Math.pow(10,g);for(let t=0;t<s;t++){const o=i?i.getX(t):t;let n="";for(let t=0,r=l.length;t<r;t++){const r=l[t],i=e.getAttribute(r),s=i.itemSize;for(let e=0;e<s;e++)n+=~~(i[c[e]](o)*h)+","}if(n in r)m.push(r[n]);else{for(let t=0,r=l.length;t<r;t++){const r=l[t],i=e.getAttribute(r),n=e.morphAttributes[r],s=i.itemSize,u=f[r],m=a[r];for(let e=0;e<s;e++){const t=c[e];if(u.push(i[t](o)),n)for(let e=0,r=n.length;e<r;e++)m[e].push(n[e][t](o))}}r[n]=u,m.push(u),u++}}const b=e.clone();for(let t=0,r=l.length;t<r;t++){const r=l[t],i=e.getAttribute(r),n=new i.array.constructor(f[r]),s=new o.BufferAttribute(n,i.itemSize,i.normalized);if(b.setAttribute(r,s),r in a)for(let t=0;t<a[r].length;t++){const i=e.morphAttributes[r][t],n=new i.array.constructor(a[r][t]),s=new o.BufferAttribute(n,i.itemSize,i.normalized);b.morphAttributes[r][t]=s}}return b.setIndex(m),b}}));
//# sourceMappingURL=characterMovement.b90fbef9.js.map
