{"mappings":"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","sources":["example/randomSampleDebug.js"],"sourcesContent":["import * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';\nimport { acceleratedRaycast, computeBoundsTree, disposeBoundsTree, AVERAGE, MeshBVHVisualizer } from '..';\n\n// Code for debugging issue #180 and other random raycast test associated issues.\nTHREE.Mesh.prototype.raycast = acceleratedRaycast;\nTHREE.BufferGeometry.prototype.computeBoundsTree = computeBoundsTree;\nTHREE.BufferGeometry.prototype.disposeBoundsTree = disposeBoundsTree;\n\nlet renderer, camera, scene;\nlet meshes = [];\n\nlet _seed = null;\nfunction random() {\n\n\tif ( _seed === null ) throw new Error();\n\n\tconst a = 1103515245;\n\tconst c = 12345;\n\tconst m = 2e31;\n\n\t_seed = ( a * _seed + c ) % m;\n\treturn _seed / m;\n\n}\n\ninit();\nrender();\n\nfunction init() {\n\n\tconst bgColor = 0x111111;\n\n\t// renderer setup\n\trenderer = new THREE.WebGLRenderer( { antialias: true } );\n\trenderer.setPixelRatio( window.devicePixelRatio );\n\trenderer.setSize( window.innerWidth, window.innerHeight );\n\trenderer.setClearColor( bgColor, 1 );\n\trenderer.outputEncoding = THREE.sRGBEncoding;\n\tdocument.body.appendChild( renderer.domElement );\n\n\t// scene setup\n\tscene = new THREE.Scene();\n\n\tconst light = new THREE.DirectionalLight( 0xffffff, 1 );\n\tlight.position.set( 1, 1, 1 );\n\tscene.add( light );\n\tscene.add( new THREE.AmbientLight( 0xb0bec5, 0.8 ) );\n\n\t// camera setup\n\tcamera = new THREE.PerspectiveCamera( 75, window.innerWidth / window.innerHeight, 0.1, 50 );\n\tcamera.position.set( 0, 0, 4 );\n\tcamera.far = 100;\n\tcamera.updateProjectionMatrix();\n\n\tnew OrbitControls( camera, renderer.domElement );\n\n\tconst transformSeed = 7830035629;\n\tconst raySeed = 4697211981;\n\tconst options = { strategy: AVERAGE, packData: false, maxDepth: 1 };\n\n\tconst geometry = new THREE.TorusBufferGeometry( 1, 1, 40, 10 );\n\tgeometry.computeBoundsTree( options );\n\n\t// mesh setup\n\t_seed = transformSeed;\n\trandom(); // call random() to seed with a larger value\n\n\tfor ( var i = 0; i < 10; i ++ ) {\n\n\t\tlet mesh = new THREE.Mesh( geometry, new THREE.MeshStandardMaterial() );\n\t\tmesh.rotation.x = random() * 10;\n\t\tmesh.rotation.y = random() * 10;\n\t\tmesh.rotation.z = random() * 10;\n\n\t\tmesh.position.x = random();\n\t\tmesh.position.y = random();\n\t\tmesh.position.z = random();\n\n\t\t// only the mesh at index 2 was causing an issue\n\t\tif ( i === 2 ) {\n\n\t\t\tmeshes.push( mesh );\n\t\t\tscene.add( mesh );\n\n\t\t\tconst wireframe = mesh.clone();\n\t\t\twireframe.material = new THREE.MeshBasicMaterial( { wireframe: true, color: 0xff6666 } );\n\t\t\tscene.add( wireframe );\n\n\t\t\tconst helper = new MeshBVHVisualizer( mesh, 10 );\n\t\t\tscene.add( helper );\n\n\t\t\t// mesh.add( new THREE.AxesHelper( 10 ) );\n\n\t\t}\n\n\t\tmesh.updateMatrix( true );\n\t\tmesh.updateMatrixWorld( true );\n\n\t}\n\n\t// raycast\n\t_seed = raySeed;\n\trandom(); // call random() to seed with a larger value\n\n\tconst raycaster = new THREE.Raycaster();\n\traycaster.firstHitOnly = false;\n\traycaster.ray.origin.set( random() * 10, random() * 10, random() * 10 );\n\traycaster.ray.direction.copy( raycaster.ray.origin ).multiplyScalar( - 1 ).normalize();\n\n\t// set up raycast points\n\tconst sphereGeom = new THREE.SphereBufferGeometry( 0.1 );\n\tconst sphereMesh = new THREE.Mesh( sphereGeom );\n\n\tsphereMesh.position.copy( raycaster.ray.at( 0, new THREE.Vector3() ) );\n\tscene.add( sphereMesh );\n\n\t// perform the hits\n\tconst bvhHits = raycaster.intersectObjects( meshes, true );\n\n\traycaster.firstHitOnly = true;\n\tconst firstHit = raycaster.intersectObjects( meshes, true );\n\n\tgeometry.boundsTree = null;\n\tconst ogHits = raycaster.intersectObjects( meshes, true );\n\n\tconsole.log( 'FIRST HIT', firstHit );\n\n\tconsole.log( 'BVH HITS', bvhHits );\n\n\tconsole.log( 'OG HITS', ogHits );\n\n\t// draw hit points and line\n\tconst firstHitSphere = sphereMesh.clone();\n\tfirstHitSphere.position.copy( firstHit[ 0 ].point );\n\tscene.add( firstHitSphere );\n\n\tconst bvhHitSphere = sphereMesh.clone();\n\tbvhHitSphere.position.copy( bvhHits[ 0 ].point );\n\tscene.add( bvhHitSphere );\n\n\tconst line = new THREE.Line();\n\tline.geometry.setFromPoints(\n\t\t[\n\t\t\traycaster.ray.at( 0, new THREE.Vector3() ),\n\t\t\traycaster.ray.at( 20, new THREE.Vector3() ),\n\t\t]\n\t);\n\tscene.add( line );\n\n\t// resize listener\n\twindow.addEventListener( 'resize', function () {\n\n\t\tcamera.aspect = window.innerWidth / window.innerHeight;\n\t\tcamera.updateProjectionMatrix();\n\n\t\trenderer.setSize( window.innerWidth, window.innerHeight );\n\n\t}, false );\n\n}\n\nfunction render() {\n\n\trequestAnimationFrame( render );\n\n\trenderer.render( scene, camera );\n\n}\n"],"names":["$f3fd9d12bf728609$var$renderer","$f3fd9d12bf728609$var$camera","$f3fd9d12bf728609$var$scene","$hGT0Q","Mesh","prototype","raycast","$aBPXg","acceleratedRaycast","BufferGeometry","computeBoundsTree","disposeBoundsTree","$f3fd9d12bf728609$var$meshes","$f3fd9d12bf728609$var$_seed","$f3fd9d12bf728609$var$random","Error","m","WebGLRenderer","antialias","setPixelRatio","window","devicePixelRatio","setSize","innerWidth","innerHeight","setClearColor","outputEncoding","sRGBEncoding","document","body","appendChild","domElement","Scene","light","DirectionalLight","position","set","add","AmbientLight","PerspectiveCamera","far","updateProjectionMatrix","$W2bOH","OrbitControls","options","strategy","AVERAGE","packData","maxDepth","geometry","TorusBufferGeometry","i","mesh","MeshStandardMaterial","rotation","x","y","z","push","wireframe","clone","material","MeshBasicMaterial","color","helper","MeshBVHVisualizer","updateMatrix","updateMatrixWorld","raycaster","Raycaster","firstHitOnly","ray","origin","direction","copy","multiplyScalar","normalize","sphereGeom","SphereBufferGeometry","sphereMesh","at","Vector3","bvhHits","intersectObjects","firstHit","boundsTree","ogHits","console","log","firstHitSphere","point","bvhHitSphere","line","Line","setFromPoints","addEventListener","aspect","$f3fd9d12bf728609$var$init","$f3fd9d12bf728609$var$render","requestAnimationFrame","render"],"version":3,"file":"randomSampleDebug.7338a31e.js.map"}