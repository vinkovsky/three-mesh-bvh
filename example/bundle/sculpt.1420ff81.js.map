{"mappings":"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","sources":["node_modules/stats.js/src/Stats.js","example/sculpt.js"],"sourcesContent":["/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nvar Stats = function () {\n\n\tvar mode = 0;\n\n\tvar container = document.createElement( 'div' );\n\tcontainer.style.cssText = 'position:fixed;top:0;left:0;cursor:pointer;opacity:0.9;z-index:10000';\n\tcontainer.addEventListener( 'click', function ( event ) {\n\n\t\tevent.preventDefault();\n\t\tshowPanel( ++ mode % container.children.length );\n\n\t}, false );\n\n\t//\n\n\tfunction addPanel( panel ) {\n\n\t\tcontainer.appendChild( panel.dom );\n\t\treturn panel;\n\n\t}\n\n\tfunction showPanel( id ) {\n\n\t\tfor ( var i = 0; i < container.children.length; i ++ ) {\n\n\t\t\tcontainer.children[ i ].style.display = i === id ? 'block' : 'none';\n\n\t\t}\n\n\t\tmode = id;\n\n\t}\n\n\t//\n\n\tvar beginTime = ( performance || Date ).now(), prevTime = beginTime, frames = 0;\n\n\tvar fpsPanel = addPanel( new Stats.Panel( 'FPS', '#0ff', '#002' ) );\n\tvar msPanel = addPanel( new Stats.Panel( 'MS', '#0f0', '#020' ) );\n\n\tif ( self.performance && self.performance.memory ) {\n\n\t\tvar memPanel = addPanel( new Stats.Panel( 'MB', '#f08', '#201' ) );\n\n\t}\n\n\tshowPanel( 0 );\n\n\treturn {\n\n\t\tREVISION: 16,\n\n\t\tdom: container,\n\n\t\taddPanel: addPanel,\n\t\tshowPanel: showPanel,\n\n\t\tbegin: function () {\n\n\t\t\tbeginTime = ( performance || Date ).now();\n\n\t\t},\n\n\t\tend: function () {\n\n\t\t\tframes ++;\n\n\t\t\tvar time = ( performance || Date ).now();\n\n\t\t\tmsPanel.update( time - beginTime, 200 );\n\n\t\t\tif ( time > prevTime + 1000 ) {\n\n\t\t\t\tfpsPanel.update( ( frames * 1000 ) / ( time - prevTime ), 100 );\n\n\t\t\t\tprevTime = time;\n\t\t\t\tframes = 0;\n\n\t\t\t\tif ( memPanel ) {\n\n\t\t\t\t\tvar memory = performance.memory;\n\t\t\t\t\tmemPanel.update( memory.usedJSHeapSize / 1048576, memory.jsHeapSizeLimit / 1048576 );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn time;\n\n\t\t},\n\n\t\tupdate: function () {\n\n\t\t\tbeginTime = this.end();\n\n\t\t},\n\n\t\t// Backwards Compatibility\n\n\t\tdomElement: container,\n\t\tsetMode: showPanel\n\n\t};\n\n};\n\nStats.Panel = function ( name, fg, bg ) {\n\n\tvar min = Infinity, max = 0, round = Math.round;\n\tvar PR = round( window.devicePixelRatio || 1 );\n\n\tvar WIDTH = 80 * PR, HEIGHT = 48 * PR,\n\t\t\tTEXT_X = 3 * PR, TEXT_Y = 2 * PR,\n\t\t\tGRAPH_X = 3 * PR, GRAPH_Y = 15 * PR,\n\t\t\tGRAPH_WIDTH = 74 * PR, GRAPH_HEIGHT = 30 * PR;\n\n\tvar canvas = document.createElement( 'canvas' );\n\tcanvas.width = WIDTH;\n\tcanvas.height = HEIGHT;\n\tcanvas.style.cssText = 'width:80px;height:48px';\n\n\tvar context = canvas.getContext( '2d' );\n\tcontext.font = 'bold ' + ( 9 * PR ) + 'px Helvetica,Arial,sans-serif';\n\tcontext.textBaseline = 'top';\n\n\tcontext.fillStyle = bg;\n\tcontext.fillRect( 0, 0, WIDTH, HEIGHT );\n\n\tcontext.fillStyle = fg;\n\tcontext.fillText( name, TEXT_X, TEXT_Y );\n\tcontext.fillRect( GRAPH_X, GRAPH_Y, GRAPH_WIDTH, GRAPH_HEIGHT );\n\n\tcontext.fillStyle = bg;\n\tcontext.globalAlpha = 0.9;\n\tcontext.fillRect( GRAPH_X, GRAPH_Y, GRAPH_WIDTH, GRAPH_HEIGHT );\n\n\treturn {\n\n\t\tdom: canvas,\n\n\t\tupdate: function ( value, maxValue ) {\n\n\t\t\tmin = Math.min( min, value );\n\t\t\tmax = Math.max( max, value );\n\n\t\t\tcontext.fillStyle = bg;\n\t\t\tcontext.globalAlpha = 1;\n\t\t\tcontext.fillRect( 0, 0, WIDTH, GRAPH_Y );\n\t\t\tcontext.fillStyle = fg;\n\t\t\tcontext.fillText( round( value ) + ' ' + name + ' (' + round( min ) + '-' + round( max ) + ')', TEXT_X, TEXT_Y );\n\n\t\t\tcontext.drawImage( canvas, GRAPH_X + PR, GRAPH_Y, GRAPH_WIDTH - PR, GRAPH_HEIGHT, GRAPH_X, GRAPH_Y, GRAPH_WIDTH - PR, GRAPH_HEIGHT );\n\n\t\t\tcontext.fillRect( GRAPH_X + GRAPH_WIDTH - PR, GRAPH_Y, PR, GRAPH_HEIGHT );\n\n\t\t\tcontext.fillStyle = bg;\n\t\t\tcontext.globalAlpha = 0.9;\n\t\t\tcontext.fillRect( GRAPH_X + GRAPH_WIDTH - PR, GRAPH_Y, PR, round( ( 1 - ( value / maxValue ) ) * GRAPH_HEIGHT ) );\n\n\t\t}\n\n\t};\n\n};\n\nexport { Stats as default };\n","import Stats from 'stats.js/src/Stats';\nimport * as dat from 'dat.gui';\nimport * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';\nimport * as BufferGeometryUtils from 'three/examples/jsm/utils/BufferGeometryUtils.js';\nimport {\n\tacceleratedRaycast,\n\tcomputeBoundsTree,\n\tdisposeBoundsTree,\n\tCONTAINED,\n\tINTERSECTED,\n\tNOT_INTERSECTED,\n\tMeshBVHVisualizer,\n} from '..';\n\nTHREE.Mesh.prototype.raycast = acceleratedRaycast;\nTHREE.BufferGeometry.prototype.computeBoundsTree = computeBoundsTree;\nTHREE.BufferGeometry.prototype.disposeBoundsTree = disposeBoundsTree;\n\nlet stats;\nlet scene, camera, renderer, controls;\nlet targetMesh, brush, symmetryBrush, bvhHelper;\nlet normalZ = new THREE.Vector3( 0, 0, 1 );\nlet brushActive = false;\nlet mouse = new THREE.Vector2(), lastMouse = new THREE.Vector2();\nlet mouseState = false, lastMouseState = false;\nlet lastCastPose = new THREE.Vector3();\nlet material, rightClick = false;\n\nconst params = {\n\tmatcap: 'Clay',\n\n\tsize: 0.1,\n\tbrush: 'clay',\n\tintensity: 50,\n\tmaxSteps: 10,\n\tinvert: false,\n\tsymmetrical: true,\n\tflatShading: false,\n\n\tdepth: 10,\n\tdisplayHelper: false,\n};\n\nconst matcaps = {};\n\ninit();\nrender();\n\n// reset the sculpt mesh\nfunction reset() {\n\n\t// dispose of the mesh if it exists\n\tif ( targetMesh ) {\n\n\t\ttargetMesh.geometry.dispose();\n\t\ttargetMesh.material.dispose();\n\t\tscene.remove( targetMesh );\n\n\t}\n\n\t// merge the vertices because they're not already merged\n\tlet geometry = new THREE.IcosahedronBufferGeometry( 1, 100 );\n\tgeometry.deleteAttribute( 'uv' );\n\tgeometry = BufferGeometryUtils.mergeVertices( geometry );\n\tgeometry.attributes.position.setUsage( THREE.DynamicDrawUsage );\n\tgeometry.attributes.normal.setUsage( THREE.DynamicDrawUsage );\n\tgeometry.computeBoundsTree( { setBoundingBox: false } );\n\n\t// disable frustum culling because the verts will be updated\n\ttargetMesh = new THREE.Mesh(\n\t\tgeometry,\n\t\tmaterial,\n\t);\n\ttargetMesh.frustumCulled = false;\n\tscene.add( targetMesh );\n\n\t// initialize bvh helper\n\tif ( ! bvhHelper ) {\n\n\t\tbvhHelper = new MeshBVHVisualizer( targetMesh, params.depth );\n\t\tif ( params.displayHelper ) {\n\n\t\t\tscene.add( bvhHelper );\n\n\t\t}\n\n\t}\n\n\tbvhHelper.mesh = targetMesh;\n\tbvhHelper.update();\n\n}\n\nfunction init() {\n\n\tconst bgColor = 0x060609;\n\n\t// renderer setup\n\trenderer = new THREE.WebGLRenderer( { antialias: true } );\n\trenderer.setPixelRatio( window.devicePixelRatio );\n\trenderer.setSize( window.innerWidth, window.innerHeight );\n\trenderer.setClearColor( bgColor, 1 );\n\trenderer.outputEncoding = THREE.sRGBEncoding;\n\tdocument.body.appendChild( renderer.domElement );\n\trenderer.domElement.style.touchAction = 'none';\n\n\t// scene setup\n\tscene = new THREE.Scene();\n\tscene.fog = new THREE.Fog( 0x263238 / 2, 20, 60 );\n\n\tconst light = new THREE.DirectionalLight( 0xffffff, 0.5 );\n\tlight.position.set( 1, 1, 1 );\n\tscene.add( light );\n\tscene.add( new THREE.AmbientLight( 0xffffff, 0.4 ) );\n\n\t// initialize brush cursor\n\tconst brushSegments = [ new THREE.Vector3(), new THREE.Vector3( 0, 0, 1 ) ];\n\tfor ( let i = 0; i < 50; i ++ ) {\n\n\t\tconst nexti = i + 1;\n\t\tconst x1 = Math.sin( 2 * Math.PI * i / 50 );\n\t\tconst y1 = Math.cos( 2 * Math.PI * i / 50 );\n\n\t\tconst x2 = Math.sin( 2 * Math.PI * nexti / 50 );\n\t\tconst y2 = Math.cos( 2 * Math.PI * nexti / 50 );\n\n\t\tbrushSegments.push(\n\t\t\tnew THREE.Vector3( x1, y1, 0 ),\n\t\t\tnew THREE.Vector3( x2, y2, 0 )\n\t\t);\n\n\t}\n\n\tbrush = new THREE.LineSegments();\n\tbrush.geometry.setFromPoints( brushSegments );\n\tbrush.material.color.set( 0xfb8c00 );\n\tscene.add( brush );\n\n\tsymmetryBrush = brush.clone();\n\tscene.add( symmetryBrush );\n\n\t// camera setup\n\tcamera = new THREE.PerspectiveCamera( 75, window.innerWidth / window.innerHeight, 0.1, 50 );\n\tcamera.position.set( 0, 0, 3 );\n\tcamera.far = 100;\n\tcamera.updateProjectionMatrix();\n\n\t// stats setup\n\tstats = new Stats();\n\tdocument.body.appendChild( stats.dom );\n\n\t// init matcaps\n\tmatcaps[ 'Clay' ] = new THREE.TextureLoader().load( '../textures/B67F6B_4B2E2A_6C3A34_F3DBC6-256px.png' );\n\tmatcaps[ 'Red Wax' ] = new THREE.TextureLoader().load( '../textures/763C39_431510_210504_55241C-256px.png' );\n\tmatcaps[ 'Shiny Green' ] = new THREE.TextureLoader().load( '../textures/3B6E10_E3F2C3_88AC2E_99CE51-256px.png' );\n\tmatcaps[ 'Normal' ] = new THREE.TextureLoader().load( '../textures/7877EE_D87FC5_75D9C7_1C78C0-256px.png' );\n\tmaterial = new THREE.MeshMatcapMaterial( {\n\t\tflatShading: params.flatShading,\n\t} );\n\n\tfor ( const key in matcaps ) {\n\n\t\tmatcaps[ key ].encoding = THREE.sRGBEncoding;\n\n\t}\n\n\t// geometry setup\n\treset();\n\n\tconst gui = new dat.GUI();\n\tgui.add( params, 'matcap', Object.keys( matcaps ) );\n\n\tconst sculptFolder = gui.addFolder( 'Sculpting' );\n\tsculptFolder.add( params, 'brush', [ 'normal', 'clay', 'flatten' ] );\n\tsculptFolder.add( params, 'size' ).min( 0.025 ).max( 0.25 ).step( 0.005 );\n\tsculptFolder.add( params, 'intensity' ).min( 1 ).max( 100 ).step( 1 );\n\tsculptFolder.add( params, 'maxSteps' ).min( 1 ).max( 25 ).step( 1 );\n\tsculptFolder.add( params, 'symmetrical' );\n\tsculptFolder.add( params, 'invert' );\n\tsculptFolder.add( params, 'flatShading' ).onChange( value => {\n\n\t\ttargetMesh.material.flatShading = value;\n\t\ttargetMesh.material.needsUpdate = true;\n\n\t} );\n\tsculptFolder.open();\n\n\tconst helperFolder = gui.addFolder( 'BVH Helper' );\n\thelperFolder.add( params, 'depth' ).min( 1 ).max( 20 ).step( 1 ).onChange( d => {\n\n\t\tbvhHelper.depth = parseFloat( d );\n\t\tbvhHelper.update();\n\n\t} );\n\thelperFolder.add( params, 'displayHelper' ).onChange( display => {\n\n\t\tif ( display ) {\n\n\t\t\tscene.add( bvhHelper );\n\t\t\tbvhHelper.update();\n\n\t\t} else {\n\n\t\t\tscene.remove( bvhHelper );\n\n\t\t}\n\n\t} );\n\thelperFolder.open();\n\n\tgui.add( { reset }, 'reset' );\n\tgui.add( { rebuildBVH: () => {\n\n\t\t// don't create a bounding box because it's used in BVH construction but\n\t\t// will be out of date after moving vertices. See issue #222.\n\t\ttargetMesh.geometry.computeBoundsTree( { setBoundingBox: false } );\n\t\tbvhHelper.update();\n\n\t} }, 'rebuildBVH' );\n\tgui.open();\n\n\twindow.addEventListener( 'resize', function () {\n\n\t\tcamera.aspect = window.innerWidth / window.innerHeight;\n\t\tcamera.updateProjectionMatrix();\n\n\t\trenderer.setSize( window.innerWidth, window.innerHeight );\n\n\t}, false );\n\n\twindow.addEventListener( 'pointermove', function ( e ) {\n\n\t\tmouse.x = ( e.clientX / window.innerWidth ) * 2 - 1;\n\t\tmouse.y = - ( e.clientY / window.innerHeight ) * 2 + 1;\n\t\tbrushActive = true;\n\n\t} );\n\n\twindow.addEventListener( 'pointerdown', e => {\n\n\t\tmouse.x = ( e.clientX / window.innerWidth ) * 2 - 1;\n\t\tmouse.y = - ( e.clientY / window.innerHeight ) * 2 + 1;\n\t\tmouseState = Boolean( e.buttons & 3 );\n\t\trightClick = Boolean( e.buttons & 2 );\n\t\tbrushActive = true;\n\n\t\tconst raycaster = new THREE.Raycaster();\n\t\traycaster.setFromCamera( mouse, camera );\n\t\traycaster.firstHitOnly = true;\n\n\t\tconst res = raycaster.intersectObject( targetMesh );\n\t\tcontrols.enabled = res.length === 0;\n\n\t}, true );\n\n\twindow.addEventListener( 'pointerup', e => {\n\n\t\tmouseState = Boolean( e.buttons & 3 );\n\t\tif ( e.pointerType === 'touch' ) {\n\n\t\t\tbrushActive = false;\n\n\t\t}\n\n\t} );\n\n\twindow.addEventListener( 'contextmenu', function ( e ) {\n\n\t\te.preventDefault();\n\n\t} );\n\n\twindow.addEventListener( 'wheel', function ( e ) {\n\n\t\tlet delta = e.deltaY;\n\n\t\tif ( e.deltaMode === 1 ) {\n\n\t\t\tdelta *= 40;\n\n\t\t}\n\n\t\tif ( e.deltaMode === 2 ) {\n\n\t\t\tdelta *= 40;\n\n\t\t}\n\n\t\tparams.size += delta * 0.0001;\n\t\tparams.size = Math.max( Math.min( params.size, 0.25 ), 0.025 );\n\n\t\tgui.updateDisplay();\n\n\t} );\n\n\tcontrols = new OrbitControls( camera, renderer.domElement );\n\tcontrols.minDistance = 1.5;\n\n\tcontrols.addEventListener( 'start', function () {\n\n\t\tthis.active = true;\n\n\t} );\n\n\tcontrols.addEventListener( 'end', function () {\n\n\t\tthis.active = false;\n\n\t} );\n\n}\n\n// Run the perform the brush movement\nfunction performStroke( point, brushObject, brushOnly = false, accumulatedFields = {} ) {\n\n\tconst {\n\t\taccumulatedTriangles = new Set(),\n\t\taccumulatedIndices = new Set(),\n\t\taccumulatedTraversedNodeIndices = new Set(),\n\t} = accumulatedFields;\n\n\tconst inverseMatrix = new THREE.Matrix4();\n\tinverseMatrix.copy( targetMesh.matrixWorld ).invert();\n\n\tconst sphere = new THREE.Sphere();\n\tsphere.center.copy( point ).applyMatrix4( inverseMatrix );\n\tsphere.radius = params.size;\n\n\t// Collect the intersected vertices\n\tconst indices = new Set();\n\tconst tempVec = new THREE.Vector3();\n\tconst normal = new THREE.Vector3();\n\tconst indexAttr = targetMesh.geometry.index;\n\tconst posAttr = targetMesh.geometry.attributes.position;\n\tconst normalAttr = targetMesh.geometry.attributes.normal;\n\tconst triangles = new Set();\n\tconst bvh = targetMesh.geometry.boundsTree;\n\tbvh.shapecast( {\n\n\t\tintersectsBounds: ( box, isLeaf, score, depth, nodeIndex ) => {\n\n\t\t\taccumulatedTraversedNodeIndices.add( nodeIndex );\n\n\t\t\tconst intersects = sphere.intersectsBox( box );\n\t\t\tconst { min, max } = box;\n\t\t\tif ( intersects ) {\n\n\t\t\t\tfor ( let x = 0; x <= 1; x ++ ) {\n\n\t\t\t\t\tfor ( let y = 0; y <= 1; y ++ ) {\n\n\t\t\t\t\t\tfor ( let z = 0; z <= 1; z ++ ) {\n\n\t\t\t\t\t\t\ttempVec.set(\n\t\t\t\t\t\t\t\tx === 0 ? min.x : max.x,\n\t\t\t\t\t\t\t\ty === 0 ? min.y : max.y,\n\t\t\t\t\t\t\t\tz === 0 ? min.z : max.z\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tif ( ! sphere.containsPoint( tempVec ) ) {\n\n\t\t\t\t\t\t\t\treturn INTERSECTED;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn CONTAINED;\n\n\t\t\t}\n\n\t\t\treturn intersects ? INTERSECTED : NOT_INTERSECTED;\n\n\t\t},\n\n\t\tintersectsTriangle: ( tri, index, contained ) => {\n\n\t\t\tconst triIndex = index;\n\t\t\ttriangles.add( triIndex );\n\t\t\taccumulatedTriangles.add( triIndex );\n\n\t\t\tconst i3 = 3 * index;\n\t\t\tconst a = i3 + 0;\n\t\t\tconst b = i3 + 1;\n\t\t\tconst c = i3 + 2;\n\t\t\tconst va = indexAttr.getX( a );\n\t\t\tconst vb = indexAttr.getX( b );\n\t\t\tconst vc = indexAttr.getX( c );\n\t\t\tif ( contained ) {\n\n\t\t\t\tindices.add( va );\n\t\t\t\tindices.add( vb );\n\t\t\t\tindices.add( vc );\n\n\t\t\t\taccumulatedIndices.add( va );\n\t\t\t\taccumulatedIndices.add( vb );\n\t\t\t\taccumulatedIndices.add( vc );\n\n\t\t\t} else {\n\n\t\t\t\tif ( sphere.containsPoint( tri.a ) ) {\n\n\t\t\t\t\tindices.add( va );\n\t\t\t\t\taccumulatedIndices.add( va );\n\n\t\t\t\t}\n\n\t\t\t\tif ( sphere.containsPoint( tri.b ) ) {\n\n\t\t\t\t\tindices.add( vb );\n\t\t\t\t\taccumulatedIndices.add( vb );\n\n\t\t\t\t}\n\n\t\t\t\tif ( sphere.containsPoint( tri.c ) ) {\n\n\t\t\t\t\tindices.add( vc );\n\t\t\t\t\taccumulatedIndices.add( vc );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn false;\n\n\t\t}\n\n\t} );\n\n\t// Compute the average normal at this point\n\tconst localPoint = new THREE.Vector3();\n\tlocalPoint.copy( point ).applyMatrix4( inverseMatrix );\n\n\tconst planePoint = new THREE.Vector3();\n\tlet totalPoints = 0;\n\tindices.forEach( index => {\n\n\t\ttempVec.fromBufferAttribute( normalAttr, index );\n\t\tnormal.add( tempVec );\n\n\t\t// compute the average point for cases where we need to flatten\n\t\t// to the plane.\n\t\tif ( ! brushOnly ) {\n\n\t\t\ttotalPoints ++;\n\t\t\ttempVec.fromBufferAttribute( posAttr, index );\n\t\t\tplanePoint.add( tempVec );\n\n\t\t}\n\n\t} );\n\tnormal.normalize();\n\tbrushObject.quaternion.setFromUnitVectors( normalZ, normal );\n\n\tif ( totalPoints ) {\n\n\t\tplanePoint.multiplyScalar( 1 / totalPoints );\n\n\t}\n\n\t// Early out if we just want to adjust the brush\n\tif ( brushOnly ) {\n\n\t\treturn;\n\n\t}\n\n\t// perform vertex adjustment\n\tconst targetHeight = params.intensity * 0.0001;\n\tconst plane = new THREE.Plane();\n\tplane.setFromNormalAndCoplanarPoint( normal, planePoint );\n\n\tindices.forEach( index => {\n\n\t\ttempVec.fromBufferAttribute( posAttr, index );\n\n\t\t// compute the offset intensity\n\t\tconst dist = tempVec.distanceTo( localPoint );\n\t\tconst negated = params.invert !== rightClick ? - 1 : 1;\n\t\tlet intensity = 1.0 - ( dist / params.size );\n\n\t\t// offset the vertex\n\t\tif ( params.brush === 'clay' ) {\n\n\t\t\tintensity = Math.pow( intensity, 3 );\n\t\t\tconst planeDist = plane.distanceToPoint( tempVec );\n\t\t\tconst clampedIntensity = negated * Math.min( intensity * 4, 1.0 );\n\t\t\ttempVec.addScaledVector( normal, clampedIntensity * targetHeight - negated * planeDist * clampedIntensity * 0.3 );\n\n\t\t} else if ( params.brush === 'normal' ) {\n\n\t\t\tintensity = Math.pow( intensity, 2 );\n\t\t\ttempVec.addScaledVector( normal, negated * intensity * targetHeight );\n\n\t\t} else if ( params.brush === 'flatten' ) {\n\n\t\t\tintensity = Math.pow( intensity, 2 );\n\n\t\t\tconst planeDist = plane.distanceToPoint( tempVec );\n\t\t\ttempVec.addScaledVector( normal, - planeDist * intensity * params.intensity * 0.01 * 0.5 );\n\n\t\t}\n\n\t\tposAttr.setXYZ( index, tempVec.x, tempVec.y, tempVec.z );\n\t\tnormalAttr.setXYZ( index, 0, 0, 0 );\n\n\t} );\n\n\t// If we found vertices\n\tif ( indices.size ) {\n\n\t\tposAttr.needsUpdate = true;\n\n\t}\n\n}\n\nfunction updateNormals( triangles, indices ) {\n\n\tconst tempVec = new THREE.Vector3();\n\tconst tempVec2 = new THREE.Vector3();\n\tconst indexAttr = targetMesh.geometry.index;\n\tconst posAttr = targetMesh.geometry.attributes.position;\n\tconst normalAttr = targetMesh.geometry.attributes.normal;\n\n\t// accumulate the normals in place in the normal buffer\n\tconst triangle = new THREE.Triangle();\n\ttriangles.forEach( tri => {\n\n\t\tconst tri3 = tri * 3;\n\t\tconst i0 = tri3 + 0;\n\t\tconst i1 = tri3 + 1;\n\t\tconst i2 = tri3 + 2;\n\n\t\tconst v0 = indexAttr.getX( i0 );\n\t\tconst v1 = indexAttr.getX( i1 );\n\t\tconst v2 = indexAttr.getX( i2 );\n\n\t\ttriangle.a.fromBufferAttribute( posAttr, v0 );\n\t\ttriangle.b.fromBufferAttribute( posAttr, v1 );\n\t\ttriangle.c.fromBufferAttribute( posAttr, v2 );\n\t\ttriangle.getNormal( tempVec2 );\n\n\t\tif ( indices.has( v0 ) ) {\n\n\t\t\ttempVec.fromBufferAttribute( normalAttr, v0 );\n\t\t\ttempVec.add( tempVec2 );\n\t\t\tnormalAttr.setXYZ( v0, tempVec.x, tempVec.y, tempVec.z );\n\n\t\t}\n\n\t\tif ( indices.has( v1 ) ) {\n\n\t\t\ttempVec.fromBufferAttribute( normalAttr, v1 );\n\t\t\ttempVec.add( tempVec2 );\n\t\t\tnormalAttr.setXYZ( v1, tempVec.x, tempVec.y, tempVec.z );\n\n\t\t}\n\n\t\tif ( indices.has( v2 ) ) {\n\n\t\t\ttempVec.fromBufferAttribute( normalAttr, v2 );\n\t\t\ttempVec.add( tempVec2 );\n\t\t\tnormalAttr.setXYZ( v2, tempVec.x, tempVec.y, tempVec.z );\n\n\t\t}\n\n\t} );\n\n\t// normalize the accumulated normals\n\tindices.forEach( index => {\n\n\t\ttempVec.fromBufferAttribute( normalAttr, index );\n\t\ttempVec.normalize();\n\t\tnormalAttr.setXYZ( index, tempVec.x, tempVec.y, tempVec.z );\n\n\t} );\n\n\tnormalAttr.needsUpdate = true;\n\n}\n\nfunction render() {\n\n\trequestAnimationFrame( render );\n\n\tstats.begin();\n\n\tmaterial.matcap = matcaps[ params.matcap ];\n\n\tif ( controls.active || ! brushActive ) {\n\n\t\t// If the controls are being used then don't perform the strokes\n\t\tbrush.visible = false;\n\t\tsymmetryBrush.visible = false;\n\t\tlastCastPose.setScalar( Infinity );\n\n\t} else {\n\n\t\tconst raycaster = new THREE.Raycaster();\n\t\traycaster.setFromCamera( mouse, camera );\n\t\traycaster.firstHitOnly = true;\n\n\t\tconst hit = raycaster.intersectObject( targetMesh, true )[ 0 ];\n\t\t// if we hit the target mesh\n\t\tif ( hit ) {\n\n\t\t\tbrush.visible = true;\n\t\t\tbrush.scale.set( params.size, params.size, 0.1 );\n\t\t\tbrush.position.copy( hit.point );\n\n\t\t\tsymmetryBrush.visible = params.symmetrical;\n\t\t\tsymmetryBrush.scale.set( params.size, params.size, 0.1 );\n\t\t\tsymmetryBrush.position.copy( hit.point );\n\t\t\tsymmetryBrush.position.x *= - 1;\n\n\t\t\tcontrols.enabled = false;\n\n\t\t\t// if the last cast pose was missed in the last frame then set it to\n\t\t\t// the current point so we don't streak across the surface\n\t\t\tif ( lastCastPose.x === Infinity ) {\n\n\t\t\t\tlastCastPose.copy( hit.point );\n\n\t\t\t}\n\n\t\t\t// If the mouse isn't pressed don't perform the stroke\n\t\t\tif ( ! ( mouseState || lastMouseState ) ) {\n\n\t\t\t\tperformStroke( hit.point, brush, true );\n\t\t\t\tif ( params.symmetrical ) {\n\n\t\t\t\t\thit.point.x *= - 1;\n\t\t\t\t\tperformStroke( hit.point, symmetryBrush, true );\n\t\t\t\t\thit.point.x *= - 1;\n\n\t\t\t\t}\n\n\t\t\t\tlastMouse.copy( mouse );\n\t\t\t\tlastCastPose.copy( hit.point );\n\n\t\t\t} else {\n\n\t\t\t\t// compute the distance the mouse moved and that the cast point moved\n\t\t\t\tconst mdx = ( mouse.x - lastMouse.x ) * window.innerWidth * window.devicePixelRatio;\n\t\t\t\tconst mdy = ( mouse.y - lastMouse.y ) * window.innerHeight * window.devicePixelRatio;\n\t\t\t\tlet mdist = Math.sqrt( mdx * mdx + mdy * mdy );\n\t\t\t\tlet castDist = hit.point.distanceTo( lastCastPose );\n\n\t\t\t\tconst step = params.size * 0.15;\n\t\t\t\tconst percent = Math.max( step / castDist, 1 / params.maxSteps );\n\t\t\t\tconst mstep = mdist * percent;\n\t\t\t\tlet stepCount = 0;\n\n\t\t\t\t// perform multiple iterations toward the current mouse pose for a consistent stroke\n\t\t\t\t// TODO: recast here so he cursor is on the surface of the model which requires faster\n\t\t\t\t// refitting of the model\n\t\t\t\tconst changedTriangles = new Set();\n\t\t\t\tconst changedIndices = new Set();\n\t\t\t\tconst traversedNodeIndices = new Set();\n\t\t\t\tconst sets = {\n\n\t\t\t\t\taccumulatedTriangles: changedTriangles,\n\t\t\t\t\taccumulatedIndices: changedIndices,\n\t\t\t\t\taccumulatedTraversedNodeIndices: traversedNodeIndices,\n\n\t\t\t\t};\n\t\t\t\twhile ( castDist > step && mdist > params.size * 200 / hit.distance ) {\n\n\t\t\t\t\tlastMouse.lerp( mouse, percent );\n\t\t\t\t\tlastCastPose.lerp( hit.point, percent );\n\t\t\t\t\tcastDist -= step;\n\t\t\t\t\tmdist -= mstep;\n\n\t\t\t\t\tperformStroke( lastCastPose, brush, false, sets );\n\n\t\t\t\t\tif ( params.symmetrical ) {\n\n\t\t\t\t\t\tlastCastPose.x *= - 1;\n\t\t\t\t\t\tperformStroke( lastCastPose, symmetryBrush, false, sets );\n\t\t\t\t\t\tlastCastPose.x *= - 1;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tstepCount ++;\n\t\t\t\t\tif ( stepCount > params.maxSteps ) {\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// refit the bounds and update the normals if we adjusted the mesh\n\t\t\t\tif ( stepCount > 0 ) {\n\n\t\t\t\t\t// refit bounds and normal updates could happen after every stroke\n\t\t\t\t\t// so it's up to date for the next one because both of those are used when updating\n\t\t\t\t\t// the model but it's faster to do them here.\n\t\t\t\t\tupdateNormals( changedTriangles, changedIndices );\n\t\t\t\t\ttargetMesh.geometry.boundsTree.refit( traversedNodeIndices );\n\n\t\t\t\t\tif ( bvhHelper.parent !== null ) {\n\n\t\t\t\t\t\tbvhHelper.update();\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tperformStroke( hit.point, brush, true );\n\t\t\t\t\tif ( params.symmetrical ) {\n\n\t\t\t\t\t\thit.point.x *= - 1;\n\t\t\t\t\t\tperformStroke( hit.point, symmetryBrush, true );\n\t\t\t\t\t\thit.point.x *= - 1;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\t// if we didn't hit\n\t\t\tcontrols.enabled = true;\n\t\t\tbrush.visible = false;\n\t\t\tsymmetryBrush.visible = false;\n\t\t\tlastMouse.copy( mouse );\n\t\t\tlastCastPose.setScalar( Infinity );\n\n\t\t}\n\n\t}\n\n\tlastMouseState = mouseState;\n\n\trenderer.render( scene, camera );\n\tstats.end();\n\n}\n"],"names":["$dfab0b5db083582f$export$2e2bcd8739ae039","mode","container","document","createElement","addPanel","panel","appendChild","dom","showPanel","id","i","children","length","style","display","cssText","addEventListener","event","preventDefault","beginTime","performance","Date","now","prevTime","frames","fpsPanel","Panel","msPanel","self","memory","memPanel","REVISION","begin","end","time","update","usedJSHeapSize","jsHeapSizeLimit","this","domElement","setMode","name","fg","bg","min","Infinity","max","round","Math","PR","window","devicePixelRatio","WIDTH","HEIGHT","TEXT_X","TEXT_Y","GRAPH_X","GRAPH_Y","GRAPH_WIDTH","GRAPH_HEIGHT","canvas","width","height","context","getContext","font","textBaseline","fillStyle","fillRect","fillText","globalAlpha","value","maxValue","drawImage","$be7be7b7cd718808$var$stats","$be7be7b7cd718808$var$scene","$be7be7b7cd718808$var$camera","$be7be7b7cd718808$var$renderer","$be7be7b7cd718808$var$controls","$be7be7b7cd718808$var$targetMesh","$be7be7b7cd718808$var$brush","$be7be7b7cd718808$var$symmetryBrush","$be7be7b7cd718808$var$bvhHelper","$hGT0Q","Mesh","prototype","raycast","$aBPXg","acceleratedRaycast","BufferGeometry","computeBoundsTree","disposeBoundsTree","$be7be7b7cd718808$var$material","$be7be7b7cd718808$var$normalZ","Vector3","$be7be7b7cd718808$var$brushActive","$be7be7b7cd718808$var$mouse","Vector2","$be7be7b7cd718808$var$lastMouse","$be7be7b7cd718808$var$mouseState","$be7be7b7cd718808$var$lastMouseState","$be7be7b7cd718808$var$lastCastPose","$be7be7b7cd718808$var$rightClick","$be7be7b7cd718808$var$params","matcap","size","brush","intensity","maxSteps","invert","symmetrical","flatShading","depth","displayHelper","$be7be7b7cd718808$var$matcaps","$be7be7b7cd718808$var$reset","geometry","dispose","material","remove","IcosahedronBufferGeometry","deleteAttribute","$7N5zk","mergeVertices","attributes","position","setUsage","DynamicDrawUsage","normal","setBoundingBox","frustumCulled","add","MeshBVHVisualizer","mesh","$be7be7b7cd718808$var$performStroke","point","brushObject","brushOnly","accumulatedFields","accumulatedTriangles","Set","accumulatedIndices","accumulatedTraversedNodeIndices","inverseMatrix","Matrix4","copy","matrixWorld","sphere","Sphere","center","applyMatrix4","radius","indices","tempVec","indexAttr","index","posAttr","normalAttr","triangles","boundsTree","shapecast","intersectsBounds","box","isLeaf","score","nodeIndex","intersects","intersectsBox","x","y","z","set","containsPoint","INTERSECTED","CONTAINED","NOT_INTERSECTED","intersectsTriangle","tri","contained","triIndex","i3","a","b","c","va","getX","vb","vc","localPoint","planePoint","totalPoints","forEach","fromBufferAttribute","normalize","quaternion","setFromUnitVectors","multiplyScalar","targetHeight","plane","Plane","setFromNormalAndCoplanarPoint","dist","distanceTo","negated","pow","planeDist","distanceToPoint","clampedIntensity","addScaledVector","setXYZ","needsUpdate","WebGLRenderer","antialias","setPixelRatio","setSize","innerWidth","innerHeight","setClearColor","outputEncoding","sRGBEncoding","body","touchAction","Scene","fog","Fog","light","DirectionalLight","AmbientLight","brushSegments","nexti","x1","sin","PI","y1","cos","x2","y2","push","LineSegments","setFromPoints","color","clone","PerspectiveCamera","far","updateProjectionMatrix","TextureLoader","load","MeshMatcapMaterial","key","encoding","gui","$4Q0VG","GUI","Object","keys","sculptFolder","addFolder","step","onChange","open","helperFolder","d","parseFloat","rebuildBVH","aspect","e","clientX","clientY","Boolean","buttons","raycaster","Raycaster","setFromCamera","firstHitOnly","res","intersectObject","enabled","pointerType","delta","deltaY","deltaMode","updateDisplay","$W2bOH","OrbitControls","minDistance","active","$be7be7b7cd718808$var$init","$be7be7b7cd718808$var$render","requestAnimationFrame","visible","setScalar","hit","scale","mdx","mdy","mdist","sqrt","castDist","percent","mstep","stepCount","changedTriangles","changedIndices","traversedNodeIndices","sets","distance","lerp","tempVec2","triangle","Triangle","tri3","i0","i1","i2","v0","v1","v2","getNormal","has","$be7be7b7cd718808$var$updateNormals","refit","parent","render"],"version":3,"file":"sculpt.1420ff81.js.map"}